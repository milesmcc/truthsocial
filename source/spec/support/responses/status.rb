def expect_to_be_a_group_status(payload)
  expect(payload[:id]).to be_an_instance_of String
  expect(payload[:created_at]).to be_an_instance_of String
  expect(payload[:spoiler_text]).to be_an_instance_of String
  expect(payload[:language]).to be_an_instance_of(String).or eq nil
  expect(payload[:in_reply_to_id]).to be nil
  expect(payload[:in_reply_to_account_id]).to be nil
  expect(payload[:sensitive]).to be false
  expect(payload[:visibility]).to be_an_instance_of String
  expect(payload[:uri]).to be_an_instance_of String
  expect(payload[:url]).to be_an_instance_of String
  expect(payload[:replies_count]).to be_an_instance_of Integer
  expect(payload[:reblogs_count]).to be_an_instance_of Integer
  expect(payload[:favourites_count]).to be_an_instance_of Integer
  expect(payload[:favourited]).to be false
  expect(payload[:reblogged]).to be false
  expect(payload[:muted]).to be false
  expect(payload[:bookmarked]).to be false
  expect(payload[:pinned]).to be(false).or eq nil
  expect(payload[:content]).to be_an_instance_of String
  expect(payload[:text]).to be nil
  expect(payload[:quote_id]).to be nil
  expect(payload[:reblog]).to be nil
  expect(payload[:application]).to be nil
  expect(payload[:account]).to be_an_instance_of Hash
  expect(payload[:account][:id]).to be_an_instance_of String
  expect(payload[:account][:username]).to be_an_instance_of String
  expect(payload[:account][:verified]).to be false
  expect(payload[:account][:moved]).to be nil
  expect(payload[:account][:acct]).to be_an_instance_of String
  expect(payload[:account][:note]).to be_an_instance_of String
  expect(payload[:account][:url]).to be_an_instance_of String
  expect(payload[:account][:avatar]).to be_an_instance_of String
  expect(payload[:account][:avatar_static]).to be_an_instance_of String
  expect(payload[:account][:header]).to be_an_instance_of String
  expect(payload[:account][:header_static]).to be_an_instance_of String
  expect(payload[:account][:created_at]).to be_an_instance_of String
  expect(payload[:account][:last_status_at]).to be nil
  expect(payload[:account][:display_name]).to be_an_instance_of String
  expect(payload[:account][:locked]).to be false
  expect(payload[:account][:bot]).to be false
  expect(payload[:account][:discoverable]).to be nil
  expect(payload[:account][:emojis]).to be_an_instance_of Array
  expect(payload[:account][:fields]).to be_an_instance_of Array
  expect(payload[:account][:suspended]).to be nil
  expect(payload[:account][:location]).to be_an_instance_of String
  expect(payload[:account][:website]).to be_an_instance_of String
  expect(payload[:account][:group]).to be false
  expect(payload[:account][:followers_count]).to be_an_instance_of Integer
  expect(payload[:account][:following_count]).to be_an_instance_of Integer
  expect(payload[:account][:statuses_count]).to be_an_instance_of Integer
  expect(payload[:mentions]).to be_an_instance_of Array
  expect(payload[:tags]).to be_an_instance_of Array
  expect(payload[:poll]).to be nil
  expect(payload[:quote]).to be nil
  expect(payload[:in_reply_to]).to be nil
  expect(payload[:emojis]).to be_an_instance_of Array
  expect(payload[:card]).to be nil
  expect(payload[:group]).to be_an_instance_of(Hash)
  expect(payload[:group][:note]).to be_an_instance_of String
  expect(payload[:group][:discoverable]).to be true
  expect(payload[:group][:id]).to be_an_instance_of String
  expect(payload[:group][:domain]).to be nil
  expect(payload[:group][:avatar]).to be_an_instance_of String
  expect(payload[:group][:avatar_static]).to be_an_instance_of String
  expect(payload[:group][:header]).to be_an_instance_of String
  expect(payload[:group][:header_static]).to be_an_instance_of String
  expect(payload[:group][:group_visibility]).to be_an_instance_of String
  expect(payload[:group][:created_at]).to be_an_instance_of String
  expect(payload[:group][:display_name]).to be_an_instance_of String
  expect(payload[:group][:membership_required]).to be true
  expect(payload[:group][:members_count]).to be_an_instance_of Integer
  expect(payload[:group][:tags]).to be_an_instance_of Array
  expect(payload[:media_attachments]).to be_an_instance_of Array
end

def expect_to_be_a_status(payload)
  expect(payload[:id]).to eq Status.first.id.to_s
  expect(payload[:created_at]).to be_an_instance_of String
  expect(payload[:spoiler_text]).to be_an_instance_of String
  expect(payload[:language]).to be_an_instance_of(String).or eq nil
  expect(payload[:in_reply_to_id]).to be nil
  expect(payload[:in_reply_to_account_id]).to be nil
  expect(payload[:sensitive]).to be false
  expect(payload[:visibility]).to be_an_instance_of String
  expect(payload[:uri]).to be_an_instance_of String
  expect(payload[:url]).to be_an_instance_of String
  expect(payload[:replies_count]).to be_an_instance_of Integer
  expect(payload[:reblogs_count]).to be_an_instance_of Integer
  expect(payload[:favourites_count]).to be_an_instance_of Integer
  expect(payload[:favourited]).to be false
  expect(payload[:reblogged]).to be false
  expect(payload[:muted]).to be false
  expect(payload[:bookmarked]).to be false
  expect(payload[:pinned]).to be(false).or eq nil
  expect(payload[:content]).to be_an_instance_of String
  expect(payload[:text]).to be nil
  expect(payload[:quote_id]).to be nil
  expect(payload[:reblog]).to be nil
  expect(payload[:application]).to be nil
  expect(payload[:account]).to be_an_instance_of Hash
  expect(payload[:account][:id]).to be_an_instance_of String
  expect(payload[:account][:username]).to be_an_instance_of String
  expect(payload[:account][:verified]).to be false
  expect(payload[:account][:moved]).to be nil
  expect(payload[:account][:acct]).to be_an_instance_of String
  expect(payload[:account][:note]).to be_an_instance_of String
  expect(payload[:account][:url]).to be_an_instance_of String
  expect(payload[:account][:avatar]).to be_an_instance_of String
  expect(payload[:account][:avatar_static]).to be_an_instance_of String
  expect(payload[:account][:header]).to be_an_instance_of String
  expect(payload[:account][:header_static]).to be_an_instance_of String
  expect(payload[:account][:created_at]).to be_an_instance_of String
  expect(payload[:account][:last_status_at]).to be nil
  expect(payload[:account][:display_name]).to be_an_instance_of String
  expect(payload[:account][:locked]).to be false
  expect(payload[:account][:bot]).to be false
  expect(payload[:account][:discoverable]).to be nil
  expect(payload[:account][:emojis]).to be_an_instance_of Array
  expect(payload[:account][:fields]).to be_an_instance_of Array
  expect(payload[:account][:suspended]).to be nil
  expect(payload[:account][:location]).to be_an_instance_of String
  expect(payload[:account][:website]).to be_an_instance_of String
  expect(payload[:account][:group]).to be false
  expect(payload[:account][:followers_count]).to be_an_instance_of Integer
  expect(payload[:account][:following_count]).to be_an_instance_of Integer
  expect(payload[:account][:statuses_count]).to be_an_instance_of Integer
  expect(payload[:mentions]).to be_an_instance_of Array
  expect(payload[:tags]).to be_an_instance_of Array
  expect(payload[:poll]).to be nil
  expect(payload[:quote]).to be nil
  expect(payload[:in_reply_to]).to be nil
  expect(payload[:emojis]).to be_an_instance_of Array
  expect(payload[:card]).to be nil
  expect(payload[:group]).to be nil
  expect(payload[:media_attachments]).to be_an_instance_of Array
end
