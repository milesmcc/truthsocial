{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/status/components/action_bar.js","webpack:///./app/javascript/mastodon/features/status/index.js"],"names":["messages","defineMessages","delete","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","bookmark","more","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","copy","blockDomain","unblockDomain","unmute","unblock","ActionBar","connect","state","status","relationship","getIn","injectIntl","handleReplyClick","props","onReply","handleReblogClick","e","onReblog","handleFavouriteClick","onFavourite","handleBookmarkClick","onBookmark","handleDeleteClick","onDelete","context","router","history","handleRedraftClick","handleDirectClick","onDirect","get","handleMentionClick","onMention","handleMuteClick","onMute","onUnmute","account","handleBlockClick","onBlock","onUnblock","handleBlockDomain","onBlockDomain","split","handleUnblockDomain","onUnblockDomain","handleConversationMuteClick","onMuteConversation","handleReport","onReport","handlePinClick","onPin","handleShare","navigator","text","url","handleEmbed","onEmbed","handleCopy","textarea","document","createElement","textContent","style","position","body","appendChild","select","execCommand","removeChild","render","this","intl","publicStatus","includes","mutingConversation","writtenByMe","me","menu","push","formatMessage","action","name","domain","isStaff","href","replyIcon","shareButton","className","svg","title","icon","onClick","reblogTitle","reblogPrivate","classNames","disabled","active","animate","size","items","direction","React","PureComponent","contextTypes","PropTypes","object","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","blockDomainConfirm","Status","getStatus","makeGetStatus","getPictureInPicture","makeGetPictureInPicture","getAncestorsIds","createSelector","_","id","statusId","inReplyTos","ancestorsIds","Immutable","List","withMutations","mutable","unshift","getDescendantsIds","contextReplies","statuses","descendantsIds","ids","length","shift","replies","reverse","forEach","insertAt","findIndex","idx","splice","params","askReplyConfirmation","trim","pictureInPicture","fullscreen","showMedia","defaultMediaVisibility","loadedStatusId","undefined","handleToggleMediaVisibility","setState","dispatch","unfavourite","handlePin","openModal","message","confirm","onConfirm","replyCompose","handleModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unbookmark","withRedraft","deleteModal","deleteStatus","directCompose","mentionCompose","handleOpenMedia","media","index","handleOpenVideo","options","handleHotkeyOpenMedia","preventDefault","startTime","initMuteModal","unmuteStatus","muteStatus","handleToggleHidden","revealStatus","hideStatus","handleToggleAll","statusIds","concat","toJS","initBlockModal","initReport","handleUnmuteClick","unmuteAccount","handleUnblockClick","unblockAccount","handleBlockDomainClick","defaultMessage","values","handleUnblockDomainClick","handleHotkeyMoveUp","handleMoveUp","handleHotkeyMoveDown","handleMoveDown","handleHotkeyReply","handleHotkeyFavourite","handleHotkeyBoost","handleHotkeyMention","handleHotkeyOpenProfile","handleHotkeyToggleHidden","handleHotkeyToggleSensitive","_selectChild","indexOf","setRef","c","node","onFullScreenChange","isFullscreen","componentWillMount","fetchStatus","componentDidMount","attachFullscreenListener","componentWillReceiveProps","nextProps","_scrolledIntoView","align_top","container","element","querySelectorAll","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","renderChildren","list","map","onMoveUp","onMoveDown","contextType","componentDidUpdate","window","requestAnimationFrame","componentWillUnmount","detachFullscreenListener","ancestors","descendants","shouldUpdateScroll","multiColumn","handlers","moveUp","moveDown","boost","openProfile","toggleHidden","toggleSensitive","openMedia","bindToDocument","label","showBackButton","extraButton","aria-label","aria-pressed","scrollKey","ref","tabIndex","textForScreenReader","onOpenVideo","onOpenMedia","onToggleHidden","onToggleMediaVisibility","ImmutablePureComponent","propTypes","isRequired","func","ImmutablePropTypes","bool","string","contains","inUse","available"],"mappings":"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","file":"js/features/status-174c2d3d0ea604e560f3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost with original visibility' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute Conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Block domain {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n});\n\nconst mapStateToProps = (state, { status }) => ({\n  relationship: state.getIn(['relationships', status.getIn(['account', 'id'])]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    relationship: ImmutablePropTypes.map,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onBookmark: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onUnmute: PropTypes.func,\n    onBlock: PropTypes.func,\n    onUnblock: PropTypes.func,\n    onBlockDomain: PropTypes.func,\n    onUnblockDomain: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  }\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  }\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  }\n\n  handleBookmarkClick = (e) => {\n    this.props.onBookmark(this.props.status, e);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    const { status, relationship, onMute, onUnmute } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('muting')) {\n      onUnmute(account);\n    } else {\n      onMute(account);\n    }\n  }\n\n  handleBlockClick = () => {\n    const { status, relationship, onBlock, onUnblock } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('blocking')) {\n      onUnblock(account);\n    } else {\n      onBlock(status);\n    }\n  }\n\n  handleBlockDomain = () => {\n    const { status, onBlockDomain } = this.props;\n    const account = status.get('account');\n\n    onBlockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleUnblockDomain = () => {\n    const { status, onUnblockDomain } = this.props;\n    const account = status.get('account');\n\n    onUnblockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  render () {\n    const { status, relationship, intl } = this.props;\n\n    const publicStatus       = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const account            = status.get('account');\n    const writtenByMe        = status.getIn(['account', 'id']) === me;\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (writtenByMe) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n        menu.push(null);\n      }\n\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.handleMuteClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.handleMuteClick });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.handleBlockClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.handleBlockClick });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n\n      if (account.get('acct') !== account.get('username')) {\n        const domain = account.get('acct').split('@')[1];\n\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.handleUnblockDomain });\n        } else {\n          menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.handleBlockDomain });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && publicStatus && (\n      <div className='detailed-status__button'><IconButton svg=\"share\" title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';\n\n    let reblogTitle;\n    if (status.get('reblogged')) {\n      reblogTitle = intl.formatMessage(messages.cancel_reblog_private);\n    } else if (publicStatus) {\n      reblogTitle = intl.formatMessage(messages.reblog);\n    } else if (reblogPrivate) {\n      reblogTitle = intl.formatMessage(messages.reblog_private);\n    } else {\n      reblogTitle = intl.formatMessage(messages.cannot_reblog);\n    }\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton  svg=\"reply\"  title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button' ><IconButton svg=\"retruth\"  className={classNames({ reblogPrivate })} disabled={!publicStatus && !reblogPrivate} active={status.get('reblogged')} title={reblogTitle} icon='retweet' onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton svg=\"fire\"  className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        {shareButton}\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' status={status} items={menu} direction='left' title={intl.formatMessage(messages.more)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { createSelector } from 'reselect';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  bookmark,\n  unbookmark,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport {\n  unblockAccount,\n  unmuteAccount,\n} from '../../actions/accounts';\nimport {\n  blockDomain,\n  unblockDomain,\n} from '../../actions/domain_blocks';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initBlockModal } from '../../actions/blocks';\nimport { initBoostModal } from '../../actions/boosts';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus, makeGetPictureInPicture } from '../../selectors';\nimport { ScrollContainer } from 'react-router-scroll-4';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n  const getPictureInPicture = makeGetPictureInPicture();\n\n  const getAncestorsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'inReplyTos']),\n  ], (statusId, inReplyTos) => {\n    let ancestorsIds = Immutable.List();\n    ancestorsIds = ancestorsIds.withMutations(mutable => {\n      let id = statusId;\n\n      while (id) {\n        mutable.unshift(id);\n        id = inReplyTos.get(id);\n      }\n    });\n\n    return ancestorsIds;\n  });\n\n  const getDescendantsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'replies']),\n    state => state.get('statuses'),\n  ], (statusId, contextReplies, statuses) => {\n    let descendantsIds = [];\n    const ids = [statusId];\n\n    while (ids.length > 0) {\n      let id        = ids.shift();\n      const replies = contextReplies.get(id);\n\n      if (statusId !== id) {\n        descendantsIds.push(id);\n      }\n\n      if (replies) {\n        replies.reverse().forEach(reply => {\n          ids.unshift(reply);\n        });\n      }\n    }\n\n    let insertAt = descendantsIds.findIndex((id) => statuses.get(id).get('in_reply_to_account_id') !== statuses.get(id).get('account'));\n    if (insertAt !== -1) {\n      descendantsIds.forEach((id, idx) => {\n        if (idx > insertAt && statuses.get(id).get('in_reply_to_account_id') === statuses.get(id).get('account')) {\n          descendantsIds.splice(idx, 1);\n          descendantsIds.splice(insertAt, 0, id);\n          insertAt += 1;\n        }\n      });\n    }\n\n    return Immutable.List(descendantsIds);\n  });\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n\n    let ancestorsIds   = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds   = getAncestorsIds(state, { id: status.get('in_reply_to_id') });\n      descendantsIds = getDescendantsIds(state, { id: status.get('id') });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n      pictureInPicture: getPictureInPicture(state, { id: props.params.statusId }),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    pictureInPicture: ImmutablePropTypes.contains({\n      inUse: PropTypes.bool,\n      available: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    fullscreen: false,\n    showMedia: defaultMediaVisibility(this.props.status),\n    loadedStatusId: undefined,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n\n    if (nextProps.status && nextProps.status.get('id') !== this.state.loadedStatusId) {\n      this.setState({ showMedia: defaultMediaVisibility(nextProps.status), loadedStatusId: nextProps.status.get('id') });\n    }\n  }\n\n  handleToggleMediaVisibility = () => {\n    this.setState({ showMedia: !this.state.showMedia });\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status, privacy) => {\n    this.props.dispatch(reblog(status, privacy));\n  }\n\n  handleReblogClick = (status, e) => {\n    if (status.get('reblogged')) {\n      this.props.dispatch(unreblog(status));\n    } else {\n      if ((e && e.shiftKey) || !boostModal) {\n        this.handleModalReblog(status);\n      } else {\n        this.props.dispatch(initBoostModal({ status, onReblog: this.handleModalReblog }));\n      }\n    }\n  }\n\n  handleBookmarkClick = (status) => {\n    if (status.get('bookmarked')) {\n      this.props.dispatch(unbookmark(status));\n    } else {\n      this.props.dispatch(bookmark(status));\n    }\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { statusId: this.props.status.get('id'), media, index }));\n  }\n\n  handleOpenVideo = (media, options) => {\n    this.props.dispatch(openModal('VIDEO', { statusId: this.props.status.get('id'), media, options }));\n  }\n\n  handleHotkeyOpenMedia = e => {\n    const { status } = this.props;\n\n    e.preventDefault();\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        this.handleOpenVideo(status.getIn(['media_attachments', 0]), { startTime: 0 });\n      } else {\n        this.handleOpenMedia(status.get('media_attachments'), 0);\n      }\n    }\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (status) => {\n    const { dispatch } = this.props;\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleUnmuteClick = account => {\n    this.props.dispatch(unmuteAccount(account.get('id')));\n  }\n\n  handleUnblockClick = account => {\n    this.props.dispatch(unblockAccount(account.get('id')));\n  }\n\n  handleBlockDomainClick = domain => {\n    this.props.dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: this.props.intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => this.props.dispatch(blockDomain(domain)),\n    }));\n  }\n\n  handleUnblockDomainClick = domain => {\n    this.props.dispatch(unblockDomain(domain));\n  }\n\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleHotkeyToggleSensitive = () => {\n    this.handleToggleMediaVisibility();\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1, true);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index, true);\n      } else {\n        this._selectChild(index - 1, true);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1, false);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2, false);\n      } else {\n        this._selectChild(index + 1, false);\n      }\n    }\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node;\n    const element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render () {\n    let ancestors, descendants;\n    const { shouldUpdateScroll, status, ancestorsIds, descendantsIds, intl, domain, multiColumn, pictureInPicture } = this.props;\n    const { fullscreen } = this.state;\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n      openMedia: this.handleHotkeyOpenMedia,\n    };\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll} aria-pressed={status.get('hidden') ? 'false' : 'true'}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread' shouldUpdateScroll={shouldUpdateScroll}>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false)}>\n                <DetailedStatus\n                  key={`details-${status.get('id')}`}\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onToggleHidden={this.handleToggleHidden}\n                  domain={domain}\n                  showMedia={this.state.showMedia}\n                  onToggleMediaVisibility={this.handleToggleMediaVisibility}\n                  pictureInPicture={pictureInPicture}\n                />\n\n                <ActionBar\n                  key={`action-bar-${status.get('id')}`}\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReblog={this.handleReblogClick}\n                  onBookmark={this.handleBookmarkClick}\n                  onDelete={this.handleDeleteClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onUnmute={this.handleUnmuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onUnblock={this.handleUnblockClick}\n                  onBlockDomain={this.handleBlockDomainClick}\n                  onUnblockDomain={this.handleUnblockDomainClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}