{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/public_timeline/components/column_settings.js","webpack:///./app/javascript/mastodon/features/public_timeline/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/public_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","settingPath","label","id","defaultMessage","React","PureComponent","connect","state","uuid","columnId","columns","getIn","index","findIndex","c","get","dispatch","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","PublicTimeline","onlyMedia","onlyRemote","timelineState","hasUnread","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandPublicTimeline","componentDidMount","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","intl","shouldUpdateScroll","multiColumn","pinned","bindToDocument","ref","formatMessage","icon","active","onPin","onMove","onClick","timelineId","onLoadMore","trackScroll","scrollKey","emptyMessage","contextTypes","router","PropTypes","object","defaultProps"],"mappings":"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","file":"js/features/public_timeline-03679096ae8b10d943ad.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n          <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { changeColumnParams } from '../../../actions/columns';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectPublicStream } from '../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const timelineState = state.getIn(['timelines', `public${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PublicTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote } }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n    this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n      this.disconnect();\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote }));\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          timelineId={`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          shouldUpdateScroll={shouldUpdateScroll}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}