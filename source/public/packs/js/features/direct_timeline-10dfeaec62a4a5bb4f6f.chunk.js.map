{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversation.js","webpack:///./app/javascript/mastodon/features/direct_timeline/containers/conversation_container.js","webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversations_list.js","webpack:///./app/javascript/mastodon/features/direct_timeline/containers/conversations_list_container.js","webpack:///./app/javascript/mastodon/features/direct_timeline/index.js"],"names":["messages","defineMessages","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","injectIntl","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","handleClick","context","router","props","lastStatus","unread","markRead","history","push","get","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","render","this","accounts","scrollKey","intl","menu","text","formatMessage","action","names","map","a","to","href","title","className","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","classNames","tabIndex","onClick","role","size","timestamp","onMouseEnter","onMouseLeave","id","defaultMessage","values","status","expanded","onExpandedToggle","collapsable","compact","media","icon","items","direction","ImmutablePureComponent","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","replyConfirm","replyMessage","connect","getStatus","makeGetStatus","state","conversation","getIn","find","x","lastStatusId","accountId","dispatch","markConversationRead","_","getState","trim","openModal","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","last","onLoadMore","leading","index","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","other","ref","item","hasMore","isLoading","shouldUpdateScroll","maxId","expandConversations","DirectTimeline","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMore","componentDidMount","mountConversations","disconnect","connectDirectStream","componentWillUnmount","unmountConversations","hasUnread","multiColumn","pinned","bindToDocument","label","active","onPin","onMove","trackScroll","timelineId","emptyMessage","React","PureComponent"],"mappings":"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","file":"js/features/direct_timeline-10dfeaec62a4a5bb4f6f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport StatusContent from 'mastodon/components/status_content';\nimport AttachmentList from 'mastodon/components/attachment_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport AvatarComposite from 'mastodon/components/avatar_composite';\nimport Permalink from 'mastodon/components/permalink';\nimport IconButton from 'mastodon/components/icon_button';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport { HotKeys } from 'react-hotkeys';\nimport { autoPlayGif } from 'mastodon/initial_state';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View Conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark As Read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete Conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute Conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nexport default @injectIntl\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/statuses/${lastStatus.get('id')}`);\n  }\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  }\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  }\n\n  handleDelete = () => {\n    this.props.delete();\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  }\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  }\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n  }\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Permalink to={`/accounts/${a.get('id')}`} href={a.get('url')} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Permalink>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex='0'>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              onClick={this.handleClick}\n              expanded={!lastStatus.get('hidden')}\n              onExpandedToggle={this.handleShowMore}\n              collapsable\n            />\n\n            {lastStatus.get('media_attachments').size > 0 && (\n              <AttachmentList\n                compact\n                media={lastStatus.get('media_attachments')}\n              />\n            )}\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport Conversation from '../components/conversation';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { makeGetStatus } from 'mastodon/selectors';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'mastodon/actions/statuses';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(messages.replyMessage),\n          confirm: intl.formatMessage(messages.replyConfirm),\n          onConfirm: () => dispatch(replyCompose(status, router)),\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ConversationContainer from '../containers/conversation_container';\nimport ScrollableList from '../../../components/scrollable_list';\nimport { debounce } from 'lodash';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n    shouldUpdateScroll: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id)\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true })\n\n  render () {\n    const { conversations, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ConversationsList from '../components/conversations_list';\nimport { expandConversations } from '../../../actions/conversations';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { mountConversations, unmountConversations, expandConversations } from '../../actions/conversations';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connectDirectStream } from '../../actions/streaming';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct Messages' },\n});\n\nexport default @connect()\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, shouldUpdateScroll } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n          shouldUpdateScroll={shouldUpdateScroll}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}