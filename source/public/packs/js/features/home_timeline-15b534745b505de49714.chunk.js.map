{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/home_timeline/components/column_settings.js","webpack:///./app/javascript/mastodon/features/home_timeline/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/getting_started/components/announcements.js","webpack:///./app/javascript/mastodon/features/getting_started/containers/announcements_container.js","webpack:///./app/javascript/mastodon/features/home_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","id","defaultMessage","prefix","settingPath","label","React","PureComponent","connect","state","getIn","dispatch","key","checked","changeSetting","onSave","saveSettings","messages","defineMessages","close","previous","next","Content","setRef","c","node","onMentionClick","mention","e","context","router","button","ctrlKey","metaKey","preventDefault","history","push","get","onHashtagClick","hashtag","replace","onStatusClick","status","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","componentDidMount","_updateLinks","componentDidUpdate","links","link","classList","contains","add","announcement","find","item","href","addEventListener","bind","setAttribute","textContent","previousSibling","text","ref","dangerouslySetInnerHTML","__html","onMouseEnter","onMouseLeave","ImmutablePureComponent","contextTypes","PropTypes","object","propTypes","ImmutablePropTypes","map","isRequired","Emoji","emojiMap","hovered","unicodeMapping","filename","shortCode","title","draggable","alt","assetHost","Reaction","handleClick","reaction","announcementId","addReaction","removeReaction","setState","classNames","active","onClick","style","value","string","func","ReactionsBar","handleEmojiPick","data","native","willEnter","scale","reduceMotion","willLeave","spring","stiffness","damping","visibleReactions","reactions","filter","x","styles","toArray","items","isEmpty","transform","position","size","onPickEmoji","list","Announcement","unread","selected","startsAt","Date","endsAt","now","hasTimeRange","skipYear","getFullYear","skipEndDate","getDate","getMonth","skipTime","hour12","year","undefined","month","day","hour","minute","intl","bool","Announcements","index","handleChangeIndex","announcements","handleNextClick","handlePrevClick","getDerivedStateFromProps","_markAnnouncementAsRead","dismissAnnouncement","mascot","elephantUIPlane","animateHeight","adjustHeight","onChangeIndex","idx","disabled","disableSwiping","reverse","formatMessage","icon","customEmojiMap","createSelector","reduce","set","ImmutableMap","name","show_announcements","hide_announcements","HomeTimeline","hasUnread","isPartial","hasAnnouncements","unreadAnnouncements","count","showAnnouncements","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","handleLoadMore","maxId","expandHomeTimeline","handleToggleAnnouncementsClick","stopPropagation","toggleShowAnnouncements","setTimeout","fetchAnnouncements","_checkIfReloadNeeded","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","shouldUpdateScroll","multiColumn","pinned","announcementsButton","aria-label","aria-pressed","bindToDocument","additionalClass","onPin","onMove","extraButton","appendContent","trackScroll","scrollKey","onLoadMore","timelineId","emptyMessage","values","suggestions","Link","to"],"mappings":"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","file":"js/features/home_timeline-15b534745b505de49714.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show boosts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting, saveSettings } from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'home']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (key, checked) {\n    dispatch(changeSetting(['home', ...key], checked));\n  },\n\n  onSave () {\n    dispatch(saveSettings());\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ReactSwipeableViews from 'react-swipeable-views';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport IconButton from 'mastodon/components/icon_button';\nimport Icon from 'mastodon/components/icon';\nimport { defineMessages, injectIntl, FormattedMessage, FormattedDate } from 'react-intl';\nimport { autoPlayGif, reduceMotion, disableSwiping } from 'mastodon/initial_state';\nimport elephantUIPlane from 'mastodon/../images/elephant_ui_plane.svg';\nimport { mascot } from 'mastodon/initial_state';\nimport unicodeMapping from 'mastodon/features/emoji/emoji_unicode_mapping_light';\nimport classNames from 'classnames';\nimport EmojiPickerDropdown from 'mastodon/features/compose/containers/emoji_picker_dropdown_container';\nimport AnimatedNumber from 'mastodon/components/animated_number';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring';\nimport { assetHost } from 'mastodon/utils/config';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },\n  next: { id: 'lightbox.next', defaultMessage: 'Next' },\n});\n\nclass Content extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n  };\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidMount () {\n    this._updateLinks();\n  }\n\n  componentDidUpdate () {\n    this._updateLinks();\n  }\n\n  _updateLinks () {\n    const node = this.node;\n\n    if (!node) {\n      return;\n    }\n\n    const links = node.querySelectorAll('a');\n\n    for (var i = 0; i < links.length; ++i) {\n      let link = links[i];\n\n      if (link.classList.contains('status-link')) {\n        continue;\n      }\n\n      link.classList.add('status-link');\n\n      let mention = this.props.announcement.get('mentions').find(item => link.href === item.get('url'));\n\n      if (mention) {\n        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);\n        link.setAttribute('title', mention.get('acct'));\n      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {\n        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);\n      } else {\n        let status = this.props.announcement.get('statuses').find(item => link.href === item.get('url'));\n        if (status) {\n          link.addEventListener('click', this.onStatusClick.bind(this, status), false);\n        }\n        link.setAttribute('title', link.href);\n        link.classList.add('unhandled-link');\n      }\n\n      link.setAttribute('target', '_blank');\n      link.setAttribute('rel', 'noopener noreferrer');\n    }\n  }\n\n  onMentionClick = (mention, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/accounts/${mention.get('id')}`);\n    }\n  }\n\n  onHashtagClick = (hashtag, e) => {\n    hashtag = hashtag.replace(/^#/, '');\n\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/timelines/tag/${hashtag}`);\n    }\n  }\n\n  onStatusClick = (status, e) => {\n    if (this.context.router && e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      this.context.router.history.push(`/statuses/${status.get('id')}`);\n    }\n  }\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n\n    return (\n      <div\n        className='announcements__item__content translate'\n        ref={this.setRef}\n        dangerouslySetInnerHTML={{ __html: announcement.get('contentHtml') }}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      />\n    );\n  }\n\n}\n\nclass Emoji extends React.PureComponent {\n\n  static propTypes = {\n    emoji: PropTypes.string.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    hovered: PropTypes.bool.isRequired,\n  };\n\n  render () {\n    const { emoji, emojiMap, hovered } = this.props;\n\n    if (unicodeMapping[emoji]) {\n      const { filename, shortCode } = unicodeMapping[this.props.emoji];\n      const title = shortCode ? `:${shortCode}:` : '';\n\n      return (\n        <img\n          draggable='false'\n          className='emojione'\n          alt={emoji}\n          title={title}\n          src={`${assetHost}/emoji/${filename}.svg`}\n        />\n      );\n    } else if (emojiMap.get(emoji)) {\n      const filename  = (autoPlayGif || hovered) ? emojiMap.getIn([emoji, 'url']) : emojiMap.getIn([emoji, 'static_url']);\n      const shortCode = `:${emoji}:`;\n\n      return (\n        <img\n          draggable='false'\n          className='emojione custom-emoji'\n          alt={shortCode}\n          title={shortCode}\n          src={filename}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass Reaction extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reaction: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    style: PropTypes.object,\n  };\n\n  state = {\n    hovered: false,\n  };\n\n  handleClick = () => {\n    const { reaction, announcementId, addReaction, removeReaction } = this.props;\n\n    if (reaction.get('me')) {\n      removeReaction(announcementId, reaction.get('name'));\n    } else {\n      addReaction(announcementId, reaction.get('name'));\n    }\n  }\n\n  handleMouseEnter = () => this.setState({ hovered: true })\n\n  handleMouseLeave = () => this.setState({ hovered: false })\n\n  render () {\n    const { reaction } = this.props;\n\n    let shortCode = reaction.get('name');\n\n    if (unicodeMapping[shortCode]) {\n      shortCode = unicodeMapping[shortCode].shortCode;\n    }\n\n    return (\n      <button className={classNames('reactions-bar__item', { active: reaction.get('me') })} onClick={this.handleClick} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} title={`:${shortCode}:`} style={this.props.style}>\n        <span className='reactions-bar__item__emoji'><Emoji hovered={this.state.hovered} emoji={reaction.get('name')} emojiMap={this.props.emojiMap} /></span>\n        <span className='reactions-bar__item__count'><AnimatedNumber value={reaction.get('count')} /></span>\n      </button>\n    );\n  }\n\n}\n\nclass ReactionsBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcementId: PropTypes.string.isRequired,\n    reactions: ImmutablePropTypes.list.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleEmojiPick = data => {\n    const { addReaction, announcementId } = this.props;\n    addReaction(announcementId, data.native.replace(/:/g, ''));\n  }\n\n  willEnter () {\n    return { scale: reduceMotion ? 1 : 0 };\n  }\n\n  willLeave () {\n    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };\n  }\n\n  render () {\n    const { reactions } = this.props;\n    const visibleReactions = reactions.filter(x => x.get('count') > 0);\n\n    const styles = visibleReactions.map(reaction => ({\n      key: reaction.get('name'),\n      data: reaction,\n      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },\n    })).toArray();\n\n    return (\n      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>\n        {items => (\n          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>\n            {items.map(({ key, data, style }) => (\n              <Reaction\n                key={key}\n                reaction={data}\n                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}\n                announcementId={this.props.announcementId}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                emojiMap={this.props.emojiMap}\n              />\n            ))}\n\n            {visibleReactions.size < 8 && <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={<Icon id='plus' />} />}\n          </div>\n        )}\n      </TransitionMotion>\n    );\n  }\n\n}\n\nclass Announcement extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcement: ImmutablePropTypes.map.isRequired,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    selected: PropTypes.bool,\n  };\n\n  state = {\n    unread: !this.props.announcement.get('read'),\n  };\n\n  componentDidUpdate () {\n    const { selected, announcement } = this.props;\n    if (!selected && this.state.unread !== !announcement.get('read')) {\n      this.setState({ unread: !announcement.get('read') });\n    }\n  }\n\n  render () {\n    const { announcement } = this.props;\n    const { unread } = this.state;\n    const startsAt = announcement.get('starts_at') && new Date(announcement.get('starts_at'));\n    const endsAt = announcement.get('ends_at') && new Date(announcement.get('ends_at'));\n    const now = new Date();\n    const hasTimeRange = startsAt && endsAt;\n    const skipYear = hasTimeRange && startsAt.getFullYear() === endsAt.getFullYear() && endsAt.getFullYear() === now.getFullYear();\n    const skipEndDate = hasTimeRange && startsAt.getDate() === endsAt.getDate() && startsAt.getMonth() === endsAt.getMonth() && startsAt.getFullYear() === endsAt.getFullYear();\n    const skipTime = announcement.get('all_day');\n\n    return (\n      <div className='announcements__item'>\n        <strong className='announcements__item__range'>\n          <FormattedMessage id='announcement.announcement' defaultMessage='Announcement' />\n          {hasTimeRange && <span> · <FormattedDate value={startsAt} hour12={false} year={(skipYear || startsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month='short' day='2-digit' hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /> - <FormattedDate value={endsAt} hour12={false} year={(skipYear || endsAt.getFullYear() === now.getFullYear()) ? undefined : 'numeric'} month={skipEndDate ? undefined : 'short'} day={skipEndDate ? undefined : '2-digit'} hour={skipTime ? undefined : '2-digit'} minute={skipTime ? undefined : '2-digit'} /></span>}\n        </strong>\n\n        <Content announcement={announcement} />\n\n        <ReactionsBar\n          reactions={announcement.get('reactions')}\n          announcementId={announcement.get('id')}\n          addReaction={this.props.addReaction}\n          removeReaction={this.props.removeReaction}\n          emojiMap={this.props.emojiMap}\n        />\n\n        {unread && <span className='announcements__item__unread' />}\n      </div>\n    );\n  }\n\n}\n\nexport default @injectIntl\nclass Announcements extends ImmutablePureComponent {\n\n  static propTypes = {\n    announcements: ImmutablePropTypes.list,\n    emojiMap: ImmutablePropTypes.map.isRequired,\n    dismissAnnouncement: PropTypes.func.isRequired,\n    addReaction: PropTypes.func.isRequired,\n    removeReaction: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    index: 0,\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.announcements.size > 0 && state.index >= props.announcements.size) {\n      return { index: props.announcements.size - 1 };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount () {\n    this._markAnnouncementAsRead();\n  }\n\n  componentDidUpdate () {\n    this._markAnnouncementAsRead();\n  }\n\n  _markAnnouncementAsRead () {\n    const { dismissAnnouncement, announcements } = this.props;\n    const { index } = this.state;\n    const announcement = announcements.get(announcements.size - 1 - index);\n    if (!announcement.get('read')) dismissAnnouncement(announcement.get('id'));\n  }\n\n  handleChangeIndex = index => {\n    this.setState({ index: index % this.props.announcements.size });\n  }\n\n  handleNextClick = () => {\n    this.setState({ index: (this.state.index + 1) % this.props.announcements.size });\n  }\n\n  handlePrevClick = () => {\n    this.setState({ index: (this.props.announcements.size + this.state.index - 1) % this.props.announcements.size });\n  }\n\n  render () {\n    const { announcements, intl } = this.props;\n    const { index } = this.state;\n\n    if (announcements.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='announcements'>\n        <img className='announcements__mastodon' alt='' draggable='false' src={mascot || elephantUIPlane} />\n\n        <div className='announcements__container'>\n          <ReactSwipeableViews animateHeight={!reduceMotion} adjustHeight={reduceMotion} index={index} onChangeIndex={this.handleChangeIndex}>\n            {announcements.map((announcement, idx) => (\n              <Announcement\n                key={announcement.get('id')}\n                announcement={announcement}\n                emojiMap={this.props.emojiMap}\n                addReaction={this.props.addReaction}\n                removeReaction={this.props.removeReaction}\n                intl={intl}\n                selected={index === idx}\n                disabled={disableSwiping}\n              />\n            )).reverse()}\n          </ReactSwipeableViews>\n\n          {announcements.size > 1 && (\n            <div className='announcements__pagination'>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.previous)} icon='chevron-left' onClick={this.handlePrevClick} size={13} />\n              <span>{index + 1} / {announcements.size}</span>\n              <IconButton disabled={announcements.size === 1} title={intl.formatMessage(messages.next)} icon='chevron-right' onClick={this.handleNextClick} size={13} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { addReaction, removeReaction, dismissAnnouncement } from 'mastodon/actions/announcements';\nimport Announcements from '../components/announcements';\nimport { createSelector } from 'reselect';\nimport { Map as ImmutableMap } from 'immutable';\n\nconst customEmojiMap = createSelector([state => state.get('custom_emojis')], items => items.reduce((map, emoji) => map.set(emoji.get('shortcode'), emoji), ImmutableMap()));\n\nconst mapStateToProps = state => ({\n  announcements: state.getIn(['announcements', 'items']),\n  emojiMap: customEmojiMap(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dismissAnnouncement: id => dispatch(dismissAnnouncement(id)),\n  addReaction: (id, name) => dispatch(addReaction(id, name)),\n  removeReaction: (id, name) => dispatch(removeReaction(id, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Announcements);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { Link } from 'react-router-dom';\nimport { fetchAnnouncements, toggleShowAnnouncements } from 'mastodon/actions/announcements';\nimport AnnouncementsContainer from 'mastodon/features/getting_started/containers/announcements_container';\nimport classNames from 'classnames';\nimport IconWithBadge from 'mastodon/components/icon_with_badge';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n  show_announcements: { id: 'home.show_announcements', defaultMessage: 'Show announcements' },\n  hide_announcements: { id: 'home.hide_announcements', defaultMessage: 'Hide announcements' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  hasAnnouncements: !state.getIn(['announcements', 'items']).isEmpty(),\n  unreadAnnouncements: state.getIn(['announcements', 'items']).count(item => !item.get('read')),\n  showAnnouncements: state.getIn(['announcements', 'show']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasAnnouncements: PropTypes.bool,\n    unreadAnnouncements: PropTypes.number,\n    showAnnouncements: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HOME', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  }\n\n  componentDidMount () {\n    setTimeout(() => this.props.dispatch(fetchAnnouncements()), 700);\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate (prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount () {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded (wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling () {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  handleToggleAnnouncementsClick = (e) => {\n    e.stopPropagation();\n    this.props.dispatch(toggleShowAnnouncements());\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, hasUnread, columnId, multiColumn, hasAnnouncements, unreadAnnouncements, showAnnouncements } = this.props;\n    const pinned = !!columnId;\n\n    let announcementsButton = null;\n\n    if (hasAnnouncements) {\n      announcementsButton = (\n        <button\n          className={classNames('column-header__button', { 'active': showAnnouncements })}\n          title={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-label={intl.formatMessage(showAnnouncements ? messages.hide_announcements : messages.show_announcements)}\n          aria-pressed={showAnnouncements ? 'true' : 'false'}\n          onClick={this.handleToggleAnnouncementsClick}\n        >\n          <IconWithBadge id='bullhorn' count={unreadAnnouncements} />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='home'\n          additionalClass='home-timeline'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={announcementsButton}\n          appendContent={hasAnnouncements && showAnnouncements && <AnnouncementsContainer />}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`home_timeline-${columnId}`}\n          onLoadMore={this.handleLoadMore}\n          timelineId='home'\n          emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Follow more people to fill it up. {suggestions}' values={{ suggestions: <Link to='/start'><FormattedMessage id='empty_column.home.suggestions' defaultMessage='See some suggestions' /></Link> }} />}\n          shouldUpdateScroll={shouldUpdateScroll}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}