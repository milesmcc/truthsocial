{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/follow_recommendations/components/account.js","webpack:///./app/javascript/mastodon/components/logo.js","webpack:///./app/javascript/mastodon/features/follow_recommendations/index.js"],"names":["messages","defineMessages","follow","unfollow","Account","connect","getAccount","makeGetAccount","state","props","account","id","injectIntl","handleFollow","dispatch","getIn","unfollowAccount","get","followAccount","render","button","this","intl","icon","title","formatMessage","active","onClick","className","href","to","size","split","ImmutablePureComponent","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","Logo","viewBox","xlinkHref","FollowRecommendations","suggestions","isLoading","handleDone","router","context","requestBrowserPermission","permission","changeSetting","saveSettings","history","push","componentDidMount","fetchSuggestions","componentWillUnmount","markAsPartial","defaultMessage","Fragment","suggestion","contextTypes","list","bool"],"mappings":"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","file":"js/features/follow_recommendations-78903f32378b65f722bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport Permalink from 'mastodon/components/permalink';\nimport IconButton from 'mastodon/components/icon_button';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { followAccount, unfollowAccount } from 'mastodon/actions/accounts';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst getFirstSentence = str => {\n  const arr = str.split(/(([\\.\\?!]+\\s)|[．。？！\\n•])/);\n\n  return arr[0];\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleFollow = () => {\n    const { account, dispatch } = this.props;\n\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      dispatch(unfollowAccount(account.get('id')));\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  }\n\n  render () {\n    const { account, intl } = this.props;\n\n    let button;\n\n    if (account.getIn(['relationship', 'following'])) {\n      button = <IconButton icon='check' title={intl.formatMessage(messages.unfollow)} active onClick={this.handleFollow} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.follow)} onClick={this.handleFollow} />;\n    }\n\n    return (\n      <div className='account follow-recommendations-account'>\n        <div className='account__wrapper'>\n          <Permalink className='account__display-name account__display-name--with-note' title={account.get('acct')} href={account.get('url')} to={`/accounts/${account.get('id')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n\n            <DisplayName account={account} />\n\n            <div className='account__note'>{getFirstSentence(account.get('note_plain'))}</div>\n          </Permalink>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\n\nconst Logo = () => (\n  <svg viewBox='0 0 216.4144 232.00976' className='logo'>\n    <use xlinkHref='#mastodon-svg-logo' />\n  </svg>\n);\n\nexport default Logo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { changeSetting, saveSettings } from 'mastodon/actions/settings';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { markAsPartial } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/features/ui/components/column';\nimport Account from './components/account';\nimport Logo from 'mastodon/components/logo';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\nimport Button from 'mastodon/components/button';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass FollowRecommendations extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions } = this.props;\n\n    // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n\n    // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  }\n\n  handleDone = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(requestBrowserPermission((permission) => {\n      if (permission === 'granted') {\n        dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n        dispatch(saveSettings());\n      }\n    }));\n\n    router.history.push('/timelines/home');\n  }\n\n  render () {\n    const { suggestions, isLoading } = this.props;\n\n    return (\n      <Column>\n        <div className='scrollable follow-recommendations-container'>\n          <div className='column-title'>\n            <Logo />\n            <h3><FormattedMessage id='follow_recommendations.heading' defaultMessage=\"Follow people you'd like to see posts from! Here are some suggestions.\" /></h3>\n            <p><FormattedMessage id='follow_recommendations.lead' defaultMessage=\"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\" /></p>\n          </div>\n\n          {!isLoading && (\n            <React.Fragment>\n              <div className='column-list'>\n                {suggestions.size > 0 ? suggestions.map(suggestion => (\n                  <Account key={suggestion.get('account')} id={suggestion.get('account')} />\n                )) : (\n                  <div className='column-list__empty-message'>\n                    <FormattedMessage id='empty_column.follow_recommendations' defaultMessage='Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.' />\n                  </div>\n                )}\n              </div>\n\n              <div className='column-actions'>\n                <Button onClick={this.handleDone}><FormattedMessage id='follow_recommendations.done' defaultMessage='Done' /></Button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}