{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_timeline/index.js"],"names":["messages","defineMessages","deleteMessage","deleteConfirm","followed","none","list","ListTimeline","connect","state","props","getIn","params","id","hasUnread","injectIntl","handlePin","columnId","dispatch","removeColumn","addColumn","context","router","history","push","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","expandListTimeline","handleEditClick","openModal","listId","handleDeleteClick","intl","message","formatMessage","confirm","onConfirm","deleteList","handleRepliesPolicyChange","target","updateList","undefined","value","componentDidMount","this","fetchList","disconnect","connectListStream","componentWillReceiveProps","nextProps","componentWillUnmount","render","shouldUpdateScroll","multiColumn","pinned","title","get","replies_policy","className","bindToDocument","ref","label","icon","active","onPin","onMove","onClick","tabIndex","defaultMessage","role","aria-labelledby","map","policy","name","checked","onChange","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","React","PureComponent","contextTypes","PropTypes","object"],"mappings":"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","file":"js/features/list_timeline-1c7c2ad7aa85fd830f22.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connectListStream } from '../../actions/streaming';\nimport { expandListTimeline } from '../../actions/timelines';\nimport { fetchList, deleteList, updateList } from '../../actions/lists';\nimport { openModal } from '../../actions/modal';\nimport MissingIndicator from '../../components/missing_indicator';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Icon from 'mastodon/components/icon';\nimport RadioButton from 'mastodon/components/radio_button';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.context.router.history.push('/');\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  }\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  }\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n\n        if (!!columnId) {\n          dispatch(removeColumn(columnId));\n        } else {\n          this.context.router.history.push('/lists');\n        }\n      },\n    }));\n  }\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, target.value));\n  }\n\n  render () {\n    const { shouldUpdateScroll, hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings__row column-header__links'>\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n          </div>\n\n          { replies_policy !== undefined && (\n            <div role='group' aria-labelledby={`list-${id}-replies-policy`}>\n              <span id={`list-${id}-replies-policy`} className='column-settings__section'>\n                <FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' />\n              </span>\n              <div className='column-settings__row'>\n                { ['none', 'list', 'followed'].map(policy => (\n                  <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                ))}\n              </div>\n            </div>\n          )}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list post new statuses, they will appear here.' />}\n          shouldUpdateScroll={shouldUpdateScroll}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}