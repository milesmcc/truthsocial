{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/notifications/components/follow_request.js","webpack:///./app/javascript/mastodon/features/notifications/containers/follow_request_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/notification.js","webpack:///./app/javascript/mastodon/features/notifications/containers/notification_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/clear_column_button.js","webpack:///./app/javascript/mastodon/features/notifications/components/grant_permission_button.js","webpack:///./app/javascript/mastodon/features/notifications/components/column_settings.js","webpack:///./app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/filter_bar.js","webpack:///./app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/notifications_permission_banner.js","webpack:///./app/javascript/mastodon/features/notifications/index.js"],"names":["messages","defineMessages","authorize","reject","FollowRequest","injectIntl","render","this","props","intl","hidden","account","onAuthorize","onReject","get","className","title","href","to","size","formatMessage","icon","onClick","ImmutablePureComponent","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","func","object","connect","getAccount","makeGetAccount","state","id","dispatch","authorizeFollowRequest","rejectFollowRequest","favourite","follow","ownPoll","poll","reblog","status","notificationForScreenReader","message","timestamp","output","push","formatDate","hour","minute","month","day","join","Notification","handleMoveUp","notification","onMoveUp","handleMoveDown","onMoveDown","handleOpen","context","router","history","handleOpenProfile","getIn","handleMention","e","preventDefault","onMention","handleHotkeyFavourite","onFavourite","handleHotkeyBoost","onReblog","handleHotkeyToggleHidden","onToggleHidden","getHandlers","reply","boost","mention","open","openProfile","moveUp","moveDown","toggleHidden","renderFollow","link","unread","handlers","classNames","tabIndex","aria-label","name","fixedWidth","defaultMessage","values","renderFollowRequest","withNote","renderMention","withDismiss","contextType","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderFavourite","muted","renderReblog","renderStatus","renderPoll","me","displayNameHtml","__html","dangerouslySetInnerHTML","contextTypes","bool","number","getNotification","makeGetNotification","getStatus","makeGetStatus","accountId","mentionCompose","onModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unfavourite","revealStatus","hideStatus","ClearColumnButton","React","PureComponent","GrantPermissionButton","ColumnSettings","onPushChange","path","checked","onChange","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","filterShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","role","aria-labelledby","prefix","settingPath","label","disabled","clearMessage","clearConfirm","permissionDenied","includes","window","permission","requestBrowserPermission","changePushNotifications","slice","showAlert","undefined","changeSetting","setFilter","openModal","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","close","NotificationsPermissionBanner","handleClick","handleClose","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","isLoading","isUnread","hasMore","numPending","lastReadId","canMarkAsRead","some","compareId","needsNotificationPermission","handleLoadGap","maxId","expandNotifications","handleLoadOlder","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","componentWillMount","mountNotifications","componentWillUnmount","cancel","unmountNotifications","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","shouldUpdateScroll","multiColumn","pinned","emptyMessage","scrollableContent","filterBarContainer","scrollContainer","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","extraButton","ref","active","onPin","onMove","defaultProps"],"mappings":"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","file":"js/features/notifications-aa9c2576cb8abc2652e4.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport Permalink from 'mastodon/components/permalink';\nimport IconButton from 'mastodon/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/accounts/${account.get('id')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__relationship'>\n            <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n            <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'mastodon/actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FollowRequest);\n","import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { HotKeys } from 'react-hotkeys';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from 'mastodon/initial_state';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'mastodon/components/icon';\nimport Permalink from 'mastodon/components/permalink';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  favourite: { id: 'notification.favourite', defaultMessage: '{name} favourited your status' },\n  follow: { id: 'notification.follow', defaultMessage: '{name} followed you' },\n  ownPoll: { id: 'notification.own_poll', defaultMessage: 'Your poll has ended' },\n  poll: { id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' },\n  reblog: { id: 'notification.reblog', defaultMessage: '{name} boosted your status' },\n  status: { id: 'notification.status', defaultMessage: '{name} just posted' },\n});\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/statuses/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/accounts/${notification.getIn(['account', 'id'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  }\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  }\n\n  getHandlers () {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.follow, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n        unread={this.props.unread}\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-favourite focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.favourite, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='star' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reblog focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reblog, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderStatus (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-status focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.status, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='home' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.status' defaultMessage='{name} just posted' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll (notification, account) {\n    const { intl, unread } = this.props;\n    const ownPoll  = me === account.get('id');\n    const message  = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-poll focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, message, notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              {ownPoll ? (\n                <FormattedMessage id='notification.own_poll' defaultMessage='Your poll has ended' />\n              ) : (\n                <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n              )}\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={account}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Permalink className='notification__display-name' href={account.get('url')} title={account.get('acct')} to={`/accounts/${account.get('id')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'status':\n      return this.renderStatus(notification, link);\n    case 'poll':\n      return this.renderPoll(notification, account);\n    }\n\n    return null;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetNotification, makeGetStatus } from '../../../selectors';\nimport Notification from '../components/notification';\nimport { initBoostModal } from '../../../actions/boosts';\nimport { mentionCompose } from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n} from '../../../actions/interactions';\nimport {\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { boostModal } from '../../../initial_state';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, props) => {\n    const notification = getNotification(state, props.notification, props.accountId);\n    return {\n      notification: notification,\n      status: notification.get('status') ? getStatus(state, { id: notification.get('status') }) : null,\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onModalReblog (status, privacy) {\n    dispatch(reblog(status, privacy));\n  },\n\n  onReblog (status, e) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      if (e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n      }\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex='0' onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.bool,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  }\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const filterShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show' defaultMessage='Show' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr  = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr   = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr  = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_markers.category' defaultMessage='Unread notification markers' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={filterShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New toots:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\nimport { showAlert } from '../../../actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport Icon from 'mastodon/components/icon';\nimport Button from 'mastodon/components/button';\nimport IconButton from 'mastodon/components/icon_button';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @connect()\n@injectIntl\nclass NotificationsPermissionBanner extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  }\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport { submitMarkers } from '../../actions/markers';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport Icon from 'mastodon/components/icon';\nimport compareId from 'mastodon/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], true),\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, shouldUpdateScroll, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = showFilterBar\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    const scrollContainer = (\n      <ScrollableList\n        scrollKey={`notifications-${columnId}`}\n        trackScroll={!pinned}\n        isLoading={isLoading}\n        showLoading={isLoading && notifications.size === 0}\n        hasMore={hasMore}\n        numPending={numPending}\n        prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n        alwaysPrepend\n        emptyMessage={emptyMessage}\n        onLoadMore={this.handleLoadOlder}\n        onLoadPending={this.handleLoadPending}\n        onScrollToTop={this.handleScrollToTop}\n        onScroll={this.handleScroll}\n        shouldUpdateScroll={shouldUpdateScroll}\n        bindToDocument={!multiColumn}\n      >\n        {scrollableContent}\n      </ScrollableList>\n    );\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n        {filterBarContainer}\n        {scrollContainer}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}