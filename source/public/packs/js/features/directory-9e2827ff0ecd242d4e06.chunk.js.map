{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/directory/components/account_card.js","webpack:///./app/javascript/mastodon/features/directory/index.js"],"names":["messages","defineMessages","follow","unfollow","requested","unblock","unmute","unfollowConfirm","AccountCard","connect","getAccount","makeGetAccount","state","id","account","dispatch","intl","onFollow","getIn","unfollowModal","openModal","message","defaultMessage","values","name","get","confirm","formatMessage","onConfirm","unfollowAccount","followAccount","onBlock","unblockAccount","blockAccount","onMute","unmuteAccount","initMuteModal","injectIntl","handleMouseEnter","currentTarget","autoPlayGif","emojis","querySelectorAll","i","length","emoji","src","getAttribute","handleMouseLeave","handleFollow","props","handleBlock","handleMute","render","buttons","this","me","following","blocking","muting","disabled","icon","title","active","onClick","className","alt","href","to","size","onMouseEnter","onMouseLeave","dangerouslySetInnerHTML","__html","value","timestamp","ImmutablePureComponent","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","recentlyActive","newArrivals","local","federated","Directory","accountIds","ImmutableList","isLoading","domain","order","handlePin","columnId","removeColumn","addColumn","getParams","params","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleChangeOrder","e","changeColumnParams","target","setState","handleChangeLocal","handleLoadMore","expandDirectory","componentDidMount","fetchDirectory","componentDidUpdate","prevProps","prevState","paramsOld","paramsNew","multiColumn","shouldUpdateScroll","pinned","scrollableArea","style","background","role","label","checked","onChange","classNames","loading","accountId","visible","bindToDocument","ref","onPin","onMove","scrollKey","React","PureComponent","contextTypes","router"],"mappings":"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","file":"js/features/directory-9e2827ff0ecd242d4e06.chunk.js","sourcesContent":["import React from 'react';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport Permalink from 'mastodon/components/permalink';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport IconButton from 'mastodon/components/icon_button';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport { autoPlayGif, me, unfollowModal } from 'mastodon/initial_state';\nimport ShortNumber from 'mastodon/components/short_number';\nimport {\n  followAccount,\n  unfollowAccount,\n  blockAccount,\n  unblockAccount,\n  unmuteAccount,\n} from 'mastodon/actions/accounts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { initMuteModal } from 'mastodon/actions/mutes';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  requested: { id: 'account.requested', defaultMessage: 'Awaiting approval' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unfollowConfirm: {\n    id: 'confirmations.unfollow.confirm',\n    defaultMessage: 'Unfollow',\n  },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { id }) => ({\n    account: getAccount(state, id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onFollow(account) {\n    if (\n      account.getIn(['relationship', 'following']) ||\n      account.getIn(['relationship', 'requested'])\n    ) {\n      if (unfollowModal) {\n        dispatch(\n          openModal('CONFIRM', {\n            message: (\n              <FormattedMessage\n                id='confirmations.unfollow.message'\n                defaultMessage='Are you sure you want to unfollow {name}?'\n                values={{ name: <strong>@{account.get('acct')}</strong> }}\n              />\n            ),\n            confirm: intl.formatMessage(messages.unfollowConfirm),\n            onConfirm: () => dispatch(unfollowAccount(account.get('id'))),\n          }),\n        );\n      } else {\n        dispatch(unfollowAccount(account.get('id')));\n      }\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  },\n\n  onBlock(account) {\n    if (account.getIn(['relationship', 'blocking'])) {\n      dispatch(unblockAccount(account.get('id')));\n    } else {\n      dispatch(blockAccount(account.get('id')));\n    }\n  },\n\n  onMute(account) {\n    if (account.getIn(['relationship', 'muting'])) {\n      dispatch(unmuteAccount(account.get('id')));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  },\n});\n\nexport default\n@injectIntl\n@connect(makeMapStateToProps, mapDispatchToProps)\nclass AccountCard extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onFollow: PropTypes.func.isRequired,\n    onBlock: PropTypes.func.isRequired,\n    onMute: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }\n\n  handleFollow = () => {\n    this.props.onFollow(this.props.account);\n  };\n\n  handleBlock = () => {\n    this.props.onBlock(this.props.account);\n  };\n\n  handleMute = () => {\n    this.props.onMute(this.props.account);\n  };\n\n  render() {\n    const { account, intl } = this.props;\n\n    let buttons;\n\n    if (\n      account.get('id') !== me &&\n      account.get('relationship', null) !== null\n    ) {\n      const following = account.getIn(['relationship', 'following']);\n      const requested = account.getIn(['relationship', 'requested']);\n      const blocking = account.getIn(['relationship', 'blocking']);\n      const muting = account.getIn(['relationship', 'muting']);\n\n      if (requested) {\n        buttons = (\n          <IconButton\n            disabled\n            icon='hourglass'\n            title={intl.formatMessage(messages.requested)}\n          />\n        );\n      } else if (blocking) {\n        buttons = (\n          <IconButton\n            active\n            icon='unlock'\n            title={intl.formatMessage(messages.unblock, {\n              name: account.get('username'),\n            })}\n            onClick={this.handleBlock}\n          />\n        );\n      } else if (muting) {\n        buttons = (\n          <IconButton\n            active\n            icon='volume-up'\n            title={intl.formatMessage(messages.unmute, {\n              name: account.get('username'),\n            })}\n            onClick={this.handleMute}\n          />\n        );\n      } else if (!account.get('moved') || following) {\n        buttons = (\n          <IconButton\n            icon={following ? 'user-times' : 'user-plus'}\n            title={intl.formatMessage(\n              following ? messages.unfollow : messages.follow,\n            )}\n            onClick={this.handleFollow}\n            active={following}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className='directory__card'>\n        <div className='directory__card__img'>\n          <img\n            src={\n              autoPlayGif ? account.get('header') : account.get('header_static')\n            }\n            alt=''\n          />\n        </div>\n\n        <div className='directory__card__bar'>\n          <Permalink\n            className='directory__card__bar__name'\n            href={account.get('url')}\n            to={`/accounts/${account.get('id')}`}\n          >\n            <Avatar account={account} size={48} />\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='directory__card__bar__relationship account__relationship'>\n            {buttons}\n          </div>\n        </div>\n\n        <div className='directory__card__extra' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n          <div\n            className='account__header__content translate'\n            dangerouslySetInnerHTML={{ __html: account.get('note_emojified') }}\n          />\n        </div>\n\n        <div className='directory__card__extra'>\n          <div className='accounts-table__count'>\n            <ShortNumber value={account.get('statuses_count')} />\n            <small>\n              <FormattedMessage id='account.posts' defaultMessage='Toots' />\n            </small>\n          </div>\n          <div className='accounts-table__count'>\n            <ShortNumber value={account.get('followers_count')} />{' '}\n            <small>\n              <FormattedMessage\n                id='account.followers'\n                defaultMessage='Followers'\n              />\n            </small>\n          </div>\n          <div className='accounts-table__count'>\n            {account.get('last_status_at') === null ? (\n              <FormattedMessage\n                id='account.never_active'\n                defaultMessage='Never'\n              />\n            ) : (\n              <RelativeTimestamp timestamp={account.get('last_status_at')} />\n            )}{' '}\n            <small>\n              <FormattedMessage\n                id='account.last_status'\n                defaultMessage='Last active'\n              />\n            </small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { addColumn, removeColumn, moveColumn, changeColumnParams } from 'mastodon/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';\nimport { List as ImmutableList } from 'immutable';\nimport AccountCard from './components/account_card';\nimport RadioButton from 'mastodon/components/radio_button';\nimport classNames from 'classnames';\nimport LoadMore from 'mastodon/components/load_more';\nimport { ScrollContainer } from 'react-router-scroll-4';\n\nconst messages = defineMessages({\n  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },\n  recentlyActive: { id: 'directory.recently_active', defaultMessage: 'Recently active' },\n  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },\n  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },\n  federated: { id: 'directory.federated', defaultMessage: 'From known fediverse' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),\n  isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Directory extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    params: PropTypes.shape({\n      order: PropTypes.string,\n      local: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    order: null,\n    local: null,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECTORY', this.getParams(this.props, this.state)));\n    }\n  }\n\n  getParams = (props, state) => ({\n    order: state.order === null ? (props.params.order || 'active') : state.order,\n    local: state.local === null ? (props.params.local || false) : state.local,\n  });\n\n  handleMove = dir => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchDirectory(this.getParams(this.props, this.state)));\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const { dispatch } = this.props;\n    const paramsOld = this.getParams(prevProps, prevState);\n    const paramsNew = this.getParams(this.props, this.state);\n\n    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {\n      dispatch(fetchDirectory(paramsNew));\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleChangeOrder = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n    } else {\n      this.setState({ order: e.target.value });\n    }\n  }\n\n  handleChangeLocal = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));\n    } else {\n      this.setState({ local: e.target.value === '1' });\n    }\n  }\n\n  handleLoadMore = () => {\n    const { dispatch } = this.props;\n    dispatch(expandDirectory(this.getParams(this.props, this.state)));\n  }\n\n  render () {\n    const { isLoading, accountIds, intl, columnId, multiColumn, domain, shouldUpdateScroll } = this.props;\n    const { order, local }  = this.getParams(this.props, this.state);\n    const pinned = !!columnId;\n\n    const scrollableArea = (\n      <div className='scrollable' style={{ background: 'transparent' }}>\n        <div className='filter-form'>\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='order' value='active' label={intl.formatMessage(messages.recentlyActive)} checked={order === 'active'} onChange={this.handleChangeOrder} />\n            <RadioButton name='order' value='new' label={intl.formatMessage(messages.newArrivals)} checked={order === 'new'} onChange={this.handleChangeOrder} />\n          </div>\n\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='local' value='1' label={intl.formatMessage(messages.local, { domain })} checked={local} onChange={this.handleChangeLocal} />\n            <RadioButton name='local' value='0' label={intl.formatMessage(messages.federated)} checked={!local} onChange={this.handleChangeLocal} />\n          </div>\n        </div>\n\n        <div className={classNames('directory__list', { loading: isLoading })}>\n          {accountIds.map(accountId => <AccountCard id={accountId} key={accountId} />)}\n        </div>\n\n        <LoadMore onClick={this.handleLoadMore} visible={!isLoading} />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='address-book-o'\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        {multiColumn && !pinned ? <ScrollContainer scrollKey='directory' shouldUpdateScroll={shouldUpdateScroll}>{scrollableArea}</ScrollContainer> : scrollableArea}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}