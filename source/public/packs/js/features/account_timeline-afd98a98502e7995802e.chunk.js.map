{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/account_timeline/index.js"],"names":["emptyList","ImmutableList","RemoteHint","url","resource","id","defaultMessage","AccountTimeline","connect","state","accountId","params","withReplies","path","remote","getIn","remoteUrl","isAccount","statusIds","featuredStatusIds","isLoading","hasMore","suspended","blockedBy","handleLoadMore","maxId","props","dispatch","expandAccountTimeline","componentWillMount","this","fetchAccount","fetchAccountIdentityProofs","expandAccountFeaturedTimeline","me","connectTimeline","componentWillReceiveProps","nextProps","disconnectTimeline","componentWillUnmount","render","emptyMessage","shouldUpdateScroll","multiColumn","isEmpty","remoteMessage","prepend","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","ImmutablePureComponent","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","string"],"mappings":"qUAoBMA,EAAYC,iBAkBZC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACjB,YAAC,IAAD,CAAcA,IAAKA,EAAKC,SAAU,YAAC,IAAD,CAAkBC,GAAG,mCAAmCC,eAAe,mBAQrGC,EADUC,mBAxBQ,SAACC,EAAD,GAA4D,IAAxCC,EAAuC,EAAjDC,OAAUD,UAAuC,IAA1BE,mBAA0B,SAC3EC,EAAOD,EAAiBF,EAAN,gBAAiCA,EAEzD,MAAO,CACLI,SAAWL,EAAMM,MAAM,CAAC,WAAYL,EAAW,WAAaD,EAAMM,MAAM,CAAC,WAAYL,EAAW,cAChGM,UAAWP,EAAMM,MAAM,CAAC,WAAYL,EAAW,QAC/CO,YAAaR,EAAMM,MAAM,CAAC,WAAYL,IACtCQ,UAAWT,EAAMM,MAAM,CAAC,YAAD,WAAyBF,EAAQ,SAAUb,GAClEmB,kBAAmBP,EAAcX,iBAAkBQ,EAAMM,MAAM,CAAC,YAAD,WAAyBL,EAAzB,UAA6C,SAAUV,GACtHoB,UAAWX,EAAMM,MAAM,CAAC,YAAD,WAAyBF,EAAQ,cACxDQ,QAASZ,EAAMM,MAAM,CAAC,YAAD,WAAyBF,EAAQ,YACtDS,UAAWb,EAAMM,MAAM,CAAC,WAAYL,EAAW,cAAc,GAC7Da,UAAWd,EAAMM,MAAM,CAAC,gBAAiBL,EAAW,eAAe,M,0JA8ErEc,eAAiB,SAAAC,GACf,EAAKC,MAAMC,SAASC,YAAsB,EAAKF,MAAMf,OAAOD,UAAW,CAAEe,QAAOb,YAAa,EAAKc,MAAMd,gB,8CA/C1GiB,mBAAA,WACE,MAAyDC,KAAKJ,MAA5ChB,EAAlB,EAAQC,OAAUD,UAAaE,EAA/B,EAA+BA,YAAae,EAA5C,EAA4CA,SAE5CA,EAASI,YAAarB,IACtBiB,EAASK,YAA2BtB,IAE/BE,GACHe,EAASM,YAA8BvB,IAGzCiB,EAASC,YAAsBlB,EAAW,CAAEE,iBAExCF,IAAcwB,KAChBP,EAASQ,YAAgB,WAAWD,O,EAIxCE,0BAAA,SAA2BC,GACzB,IAAQV,EAAaG,KAAKJ,MAAlBC,UAEHU,EAAU1B,OAAOD,YAAcoB,KAAKJ,MAAMf,OAAOD,WAAa2B,EAAU1B,OAAOD,WAAc2B,EAAUzB,cAAgBkB,KAAKJ,MAAMd,eACrIe,EAASI,YAAaM,EAAU1B,OAAOD,YACvCiB,EAASK,YAA2BK,EAAU1B,OAAOD,YAEhD2B,EAAUzB,aACbe,EAASM,YAA8BI,EAAU1B,OAAOD,YAG1DiB,EAASC,YAAsBS,EAAU1B,OAAOD,UAAW,CAAEE,YAAayB,EAAU1B,OAAOC,gBAGzFyB,EAAU1B,OAAOD,YAAcwB,KAAMJ,KAAKJ,MAAMf,OAAOD,YAAcwB,IACvEP,EAASQ,YAAgB,WAAWD,MAC3BJ,KAAKJ,MAAMf,OAAOD,YAAcwB,KAAMG,EAAU1B,OAAOD,YAAcwB,KAC9EP,EAASW,YAAmB,WAAWJ,O,EAI3CK,qBAAA,WACE,MAA4CT,KAAKJ,MAAzCC,EAAR,EAAQA,SAAR,EAAkBhB,OAAUD,YAEVwB,KAChBP,EAASW,YAAmB,WAAWJ,O,EAQ3CM,OAAA,WACE,IAmBIC,EAnBJ,EAAkJX,KAAKJ,MAA/IgB,EAAR,EAAQA,mBAAoBxB,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,kBAAmBC,EAA1D,EAA0DA,UAAWC,EAArE,EAAqEA,QAASE,EAA9E,EAA8EA,UAAWD,EAAzF,EAAyFA,UAAWL,EAApG,EAAoGA,UAAW0B,EAA/G,EAA+GA,YAAa7B,EAA5H,EAA4HA,OAAQE,EAApI,EAAoIA,UAEpI,IAAKC,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,CAAkB0B,YAAaA,IAC/B,YAAC,IAAD,KAKN,IAAKzB,GAAaE,EAChB,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAQJqB,EADEnB,EACa,YAAC,IAAD,CAAkBjB,GAAG,iCAAiCC,eAAe,sBAC3EiB,EACM,YAAC,IAAD,CAAkBlB,GAAG,mCAAmCC,eAAe,wBAC7EQ,GAAUI,EAAU0B,UACd,YAAC1C,EAAD,CAAYC,IAAKa,IAEjB,YAAC,IAAD,CAAkBX,GAAG,gCAAgCC,eAAe,mBAGrF,IAAMuC,EAAgB/B,EAAS,YAACZ,EAAD,CAAYC,IAAKa,IAAgB,KAEhE,OACE,YAAC,IAAD,UACE,YAAC,IAAD,CAAkB2B,YAAaA,IAE/B,YAAC,IAAD,CACEG,QAAS,YAAC,IAAD,CAAiBpC,UAAWoB,KAAKJ,MAAMf,OAAOD,YACvDqC,eAAa,EACbC,OAAQH,EACRI,UAAU,mBACV/B,UAAYI,GAAaC,EAAavB,EAAYkB,EAClDC,kBAAmBA,EACnBC,UAAWA,EACXC,QAASA,EACT6B,WAAYpB,KAAKN,eACjBkB,mBAAoBA,EACpBD,aAAcA,EACdU,gBAAiBR,EACjBS,WAAW,c,GAxHSC,K,EAErBC,UAAY,CACjB3C,OAAQ4C,IAAUC,OAAOC,WACzB9B,SAAU4B,IAAUG,KAAKD,WACzBf,mBAAoBa,IAAUG,KAC9BxC,UAAWyC,IAAmBC,KAC9BzC,kBAAmBwC,IAAmBC,KACtCxC,UAAWmC,IAAUM,KACrBxC,QAASkC,IAAUM,KACnBjD,YAAa2C,IAAUM,KACvBtC,UAAWgC,IAAUM,KACrB5C,UAAWsC,IAAUM,KACrBvC,UAAWiC,IAAUM,KACrB/C,OAAQyC,IAAUM,KAClB7C,UAAWuC,IAAUO,OACrBnB,YAAaY,IAAUM,M","file":"js/features/account_timeline-afd98a98502e7995802e.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport TimelineHint from 'mastodon/components/timeline_hint';\nimport { me } from 'mastodon/initial_state';\nimport { connectTimeline, disconnectTimeline } from 'mastodon/actions/timelines';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { accountId }, withReplies = false }) => {\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older toots' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    const { params: { accountId }, withReplies, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n    dispatch(fetchAccountIdentityProofs(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n\n    dispatch(expandAccountTimeline(accountId, { withReplies }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n      dispatch(fetchAccountIdentityProofs(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n\n    if (nextProps.params.accountId === me && this.props.params.accountId !== me) {\n      dispatch(connectTimeline(`account:${me}`));\n    } else if (this.props.params.accountId === me && nextProps.params.accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, params: { accountId } } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.params.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  render () {\n    const { shouldUpdateScroll, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, multiColumn, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No toots here!' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.params.accountId} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={(suspended || blockedBy) ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}