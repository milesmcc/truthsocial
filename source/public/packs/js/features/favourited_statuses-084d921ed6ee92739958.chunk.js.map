{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/favourited_statuses/index.js"],"names":["messages","defineMessages","heading","Favourites","connect","state","statusIds","getIn","isLoading","hasMore","injectIntl","handlePin","props","columnId","dispatch","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","expandFavouritedStatuses","leading","componentWillMount","this","fetchFavouritedStatuses","render","intl","shouldUpdateScroll","multiColumn","pinned","emptyMessage","id","defaultMessage","bindToDocument","ref","label","formatMessage","icon","title","onPin","onMove","onClick","showBackButton","trackScroll","scrollKey","onLoadMore","ImmutablePureComponent","propTypes","PropTypes","func","isRequired","ImmutablePropTypes","list","object","string","bool"],"mappings":"sSAaMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,sDAWHC,EAFUC,mBANQ,SAAAC,GAAK,MAAK,CAChCC,UAAWD,EAAME,MAAM,CAAC,eAAgB,aAAc,UACtDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,aAAc,cAAc,GACpEE,UAAWJ,EAAME,MAAM,CAAC,eAAgB,aAAc,Y,GAIvDG,a,wJAkBCC,UAAY,WACV,MAA+B,EAAKC,MAA5BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAGhBA,EADED,EACOE,YAAaF,GAEbG,YAAU,aAAc,M,EAIrCC,WAAa,SAACC,GACZ,MAA+B,EAAKN,MAA5BC,EAAR,EAAQA,UACRC,EADA,EAAkBA,UACTK,YAAWN,EAAUK,K,EAGhCE,kBAAoB,WAClB,EAAKC,OAAOC,a,EAGdC,OAAS,SAAAC,GACP,EAAKH,OAASG,G,EAGhBC,eAAiB,KAAS,WACxB,EAAKb,MAAME,SAASY,iBACnB,IAAK,CAAEC,SAAS,I,8CA7BnBC,mBAAA,WACEC,KAAKjB,MAAME,SAASgB,gB,EA8BtBC,OAAA,WACE,MAA2FF,KAAKjB,MAAxFoB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,mBAAoB3B,EAAlC,EAAkCA,UAAWO,EAA7C,EAA6CA,SAAUqB,EAAvD,EAAuDA,YAAazB,EAApE,EAAoEA,QAASD,EAA7E,EAA6EA,UACvE2B,IAAWtB,EAEXuB,EAAe,YAAC,IAAD,CAAkBC,GAAG,mCAAmCC,eAAe,0FAE5F,OACE,kBAAC,IAAD,CAAQC,gBAAiBL,EAAaM,IAAKX,KAAKN,OAAQkB,MAAOT,EAAKU,cAAc1C,EAASE,UACzF,YAAC,IAAD,CACEyC,KAAK,OACLC,MAAOZ,EAAKU,cAAc1C,EAASE,SACnC2C,MAAOhB,KAAKlB,UACZmC,OAAQjB,KAAKZ,WACb8B,QAASlB,KAAKT,kBACde,OAAQA,EACRD,YAAaA,EACbc,gBAAc,IAGhB,YAAC,IAAD,CACEC,aAAcd,EACd7B,UAAWA,EACX4C,UAAS,uBAAyBrC,EAClCJ,QAASA,EACTD,UAAWA,EACX2C,WAAYtB,KAAKJ,eACjBQ,mBAAoBA,EACpBG,aAAcA,EACdG,gBAAiBL,M,GAxEFkB,K,EAEhBC,UAAY,CACjBvC,SAAUwC,IAAUC,KAAKC,WACzBvB,mBAAoBqB,IAAUC,KAC9BjD,UAAWmD,IAAmBC,KAAKF,WACnCxB,KAAMsB,IAAUK,OAAOH,WACvB3C,SAAUyC,IAAUM,OACpB1B,YAAaoB,IAAUO,KACvBpD,QAAS6C,IAAUO,KACnBrD,UAAW8C,IAAUO,M","file":"js/features/favourited_statuses-084d921ed6ee92739958.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchFavouritedStatuses, expandFavouritedStatuses } from '../../actions/favourites';\nimport Column from '../ui/components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport StatusList from '../../components/status_list';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { debounce } from 'lodash';\n\nconst messages = defineMessages({\n  heading: { id: 'column.favourites', defaultMessage: 'Favourites' },\n});\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'favourites', 'items']),\n  isLoading: state.getIn(['status_lists', 'favourites', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'favourites', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Favourites extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    statusIds: ImmutablePropTypes.list.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFavouritedStatuses());\n  }\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('FAVOURITES', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFavouritedStatuses());\n  }, 300, { leading: true })\n\n  render () {\n    const { intl, shouldUpdateScroll, statusIds, columnId, multiColumn, hasMore, isLoading } = this.props;\n    const pinned = !!columnId;\n\n    const emptyMessage = <FormattedMessage id='empty_column.favourited_statuses' defaultMessage=\"You don't have any favourite toots yet. When you favourite one, it will show up here.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.heading)}>\n        <ColumnHeader\n          icon='star'\n          title={intl.formatMessage(messages.heading)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        />\n\n        <StatusList\n          trackScroll={!pinned}\n          statusIds={statusIds}\n          scrollKey={`favourited_statuses-${columnId}`}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}