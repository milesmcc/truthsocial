{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/community_timeline/components/column_settings.js","webpack:///./app/javascript/mastodon/features/community_timeline/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/community_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","settingPath","label","id","defaultMessage","React","PureComponent","connect","state","uuid","columnId","columns","getIn","index","findIndex","c","get","dispatch","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","CommunityTimeline","onlyMedia","timelineState","hasUnread","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","shouldUpdateScroll","multiColumn","pinned","bindToDocument","ref","formatMessage","icon","active","onPin","onMove","onClick","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","contextTypes","router","PropTypes","object","defaultProps"],"mappings":"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","file":"js/features/community_timeline-39503cb176cac702931c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { changeColumnParams } from '../../../actions/columns';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectCommunityStream } from '../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n    this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      this.disconnect();\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          shouldUpdateScroll={shouldUpdateScroll}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}