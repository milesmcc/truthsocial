{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/domain.js","webpack:///./app/javascript/mastodon/containers/domain_container.js","webpack:///./app/javascript/mastodon/features/domain_blocks/index.js"],"names":["messages","defineMessages","unblockDomain","Account","injectIntl","handleDomainUnblock","props","onUnblockDomain","domain","render","this","intl","className","active","icon","title","formatMessage","onClick","ImmutablePureComponent","propTypes","PropTypes","string","func","isRequired","object","blockDomainConfirm","connect","dispatch","onBlockDomain","openModal","message","id","defaultMessage","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","state","domains","getIn","hasMore","handleLoadMore","expandDomainBlocks","leading","componentWillMount","fetchDomainBlocks","shouldUpdateScroll","multiColumn","emptyMessage","bindToDocument","scrollKey","onLoadMore","map","params","bool","ImmutablePropTypes","orderedSet"],"mappings":"iSAMMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,wEAITC,EADUC,a,wJASdC,oBAAsB,WACpB,EAAKC,MAAMC,gBAAgB,EAAKD,MAAME,S,sCAGxCC,OAAA,WACE,MAAyBC,KAAKJ,MAAtBE,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,KAEhB,OACE,mBAAKC,UAAU,eAAf,EACE,mBAAKA,UAAU,wBAAf,EACE,oBAAMA,UAAU,4BAAhB,EACE,+BAASJ,IAGX,mBAAKI,UAAU,wBAAf,EACE,YAAC,IAAD,CAAYC,QAAM,EAACC,KAAK,SAASC,MAAOJ,EAAKK,cAAchB,EAASE,cAAe,CAAEM,WAAWS,QAASP,KAAKL,0B,GAvBpGa,K,EAEbC,UAAY,CACjBX,OAAQY,IAAUC,OAClBd,gBAAiBa,IAAUE,KAAKC,WAChCZ,KAAMS,IAAUI,OAAOD,Y,iBCTrBvB,EAAWC,YAAe,CAC9BwB,mBAAmB,CAAD,gFAuBLrB,cAAWsB,mBApBE,WAG1B,OAFwB,iBAAO,OAKN,SAACC,EAAD,OAAahB,EAAb,EAAaA,KAAb,MAAyB,CAClDiB,cAAepB,GACbmB,EAASE,YAAU,UAAW,CAC5BC,QAAS,YAAC,IAAD,CAAkBC,GAAG,qCAAqCC,eAAe,iJAAiJC,OAAQ,CAAEzB,OAAQ,+BAASA,MAC9P0B,QAASvB,EAAKK,cAAchB,EAASyB,oBACrCU,UAAW,kBAAMR,EAASS,YAAY5B,SAI1CD,gBAAiBC,GACfmB,EAASzB,YAAcM,QAIDkB,CAAiDW,I,SCjBrErC,EAAWC,YAAe,CAC9BqC,QAAQ,CAAD,4DACPpC,cAAc,CAAD,wEAUTqC,EAFUb,mBALQ,SAAAc,GAAK,MAAK,CAChCC,QAASD,EAAME,MAAM,CAAC,eAAgB,SAAU,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,SAAU,Y,GAInDtC,a,wJAiBCwC,eAAiB,KAAS,WACxB,EAAKtC,MAAMqB,SAASkB,iBACnB,IAAK,CAAEC,SAAS,I,8CANnBC,mBAAA,WACErC,KAAKJ,MAAMqB,SAASqB,gB,EAOtBvC,OAAA,WACE,MAAoEC,KAAKJ,MAAjEK,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,QAASQ,EAAvB,EAAuBA,mBAAoBN,EAA3C,EAA2CA,QAASO,EAApD,EAAoDA,YAEpD,IAAKT,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMU,EAAe,YAAC,IAAD,CAAkBpB,GAAG,6BAA6BC,eAAe,sCAEtF,OACE,YAAC,IAAD,CAAQoB,gBAAiBF,EAAapC,KAAK,eAAewB,QAAS3B,EAAKK,cAAchB,EAASsC,eAA/F,EACE,YAAC,IAAD,IACA,YAAC,IAAD,CACEe,UAAU,gBACVC,WAAY5C,KAAKkC,eACjBD,QAASA,EACTM,mBAAoBA,EACpBE,aAAcA,EACdC,gBAAiBF,QANnB,EAQGT,EAAQc,KAAI,SAAA/C,GAAM,OACjB,YAAC,EAAD,CAA8BA,OAAQA,GAAhBA,S,GA7CbU,K,EAEZC,UAAY,CACjBqC,OAAQpC,IAAUI,OAAOD,WACzBI,SAAUP,IAAUE,KAAKC,WACzB0B,mBAAoB7B,IAAUE,KAC9BqB,QAASvB,IAAUqC,KACnBhB,QAASiB,IAAmBC,WAC5BhD,KAAMS,IAAUI,OAAOD,WACvB2B,YAAa9B,IAAUqC,M","file":"js/features/domain_blocks-ffcdb87d45ec8e218f28.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked Domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, shouldUpdateScroll, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}