{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/reblogs/index.js"],"names":["messages","defineMessages","refresh","Reblogs","connect","state","props","accountIds","getIn","params","statusId","injectIntl","handleRefresh","dispatch","fetchReblogs","componentWillMount","this","componentWillReceiveProps","nextProps","render","intl","shouldUpdateScroll","multiColumn","emptyMessage","id","defaultMessage","bindToDocument","showBackButton","extraButton","className","title","formatMessage","aria-label","onClick","scrollKey","map","withNote","ImmutablePureComponent","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"4RAcMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,yCASHC,EAFUC,mBAJQ,SAACC,EAAOC,GAAR,MAAmB,CACzCC,WAAYF,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,c,GAIrEC,a,wJAwBCC,cAAgB,WACd,EAAKN,MAAMO,SAASC,YAAa,EAAKR,MAAMG,OAAOC,Y,8CAbrDK,mBAAA,WACOC,KAAKV,MAAMC,YACdS,KAAKV,MAAMO,SAASC,YAAaE,KAAKV,MAAMG,OAAOC,Y,EAIvDO,0BAAA,SAA0BC,GACpBA,EAAUT,OAAOC,WAAaM,KAAKV,MAAMG,OAAOC,UAAYQ,EAAUT,OAAOC,UAC/EM,KAAKV,MAAMO,SAASC,YAAaI,EAAUT,OAAOC,Y,EAQtDS,OAAA,WACE,MAA8DH,KAAKV,MAA3Dc,EAAR,EAAQA,KAAMC,EAAd,EAAcA,mBAAoBd,EAAlC,EAAkCA,WAAYe,EAA9C,EAA8CA,YAE9C,IAAKf,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMgB,EAAe,YAAC,IAAD,CAAkBC,GAAG,uBAAuBC,eAAe,iFAEhF,OACE,YAAC,IAAD,CAAQC,gBAAiBJ,QAAzB,EACE,YAAC,IAAD,CACEK,gBAAc,EACdL,YAAaA,EACbM,YACE,sBAAQC,UAAU,wBAAwBC,MAAOV,EAAKW,cAAc/B,EAASE,SAAU8B,aAAYZ,EAAKW,cAAc/B,EAASE,SAAU+B,QAASjB,KAAKJ,oBAAvJ,EAAsK,YAAC,IAAD,CAAMY,GAAG,eAInL,YAAC,IAAD,CACEU,UAAU,UACVb,mBAAoBA,EACpBE,aAAcA,EACdG,gBAAiBJ,QAJnB,EAMGf,EAAW4B,KAAI,SAAAX,GAAE,OAChB,YAAC,IAAD,CAA2BA,GAAIA,EAAIY,UAAU,GAAtBZ,S,GAzDba,K,EAEbC,UAAY,CACjB7B,OAAQ8B,IAAUC,OAAOC,WACzB5B,SAAU0B,IAAUG,KAAKD,WACzBpB,mBAAoBkB,IAAUG,KAC9BnC,WAAYoC,IAAmBC,KAC/BtB,YAAaiB,IAAUM,KACvBzB,KAAMmB,IAAUC,OAAOC,Y","file":"js/features/reblogs-b0e8700e5e13987377da.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport { fetchReblogs } from '../../actions/interactions';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ScrollableList from '../../components/scrollable_list';\nimport Icon from 'mastodon/components/icon';\nimport ColumnHeader from '../../components/column_header';\n\nconst messages = defineMessages({\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    accountIds: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchReblogs(nextProps.params.statusId));\n    }\n  }\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, accountIds, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has boosted this toot yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='reblogs'\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}