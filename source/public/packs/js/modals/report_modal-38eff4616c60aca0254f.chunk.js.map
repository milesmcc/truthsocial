{"version":3,"sources":["webpack:///./node_modules/lodash/noop.js","webpack:///./app/javascript/mastodon/features/report/components/status_check_box.js","webpack:///./app/javascript/mastodon/features/report/containers/status_check_box_container.js","webpack:///./app/javascript/mastodon/features/ui/components/report_modal.js"],"names":["module","exports","StatusCheckBox","render","this","props","status","checked","onToggle","disabled","media","get","size","some","item","getIn","video","fetchComponent","Video","loading","renderLoadingVideoPlayer","Component","preview","blurhash","src","alt","width","height","inline","sensitive","onOpenVideo","noop","MediaGallery","renderLoadingMediaGallery","onOpenMedia","className","onChange","React","PureComponent","connect","state","id","ImmutableSet","includes","dispatch","e","toggleStatusReport","target","messages","defineMessages","close","placeholder","submit","ReportModal","getAccount","makeGetAccount","accountId","isSubmitting","account","comment","forward","statusIds","OrderedSet","union","injectIntl","handleCommentChange","changeReportComment","value","handleForwardChange","changeReportForward","handleSubmit","submitReport","handleKeyDown","keyCode","ctrlKey","metaKey","componentDidMount","expandAccountTimeline","withReplies","componentWillReceiveProps","nextProps","intl","onClose","domain","split","title","formatMessage","icon","onClick","defaultMessage","values","onKeyDown","autoFocus","htmlFor","text","map","statusId","ImmutablePureComponent","propTypes","PropTypes","bool","ImmutablePropTypes","orderedSet","isRequired","string","func","object"],"mappings":"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","file":"js/modals/report_modal-38eff4616c60aca0254f.chunk.js","sourcesContent":["/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {// No operation performed.\n}\n\nmodule.exports = noop;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Toggle from 'react-toggle';\nimport noop from 'lodash/noop';\nimport StatusContent from '../../../components/status_content';\nimport { MediaGallery, Video } from '../../ui/util/async-components';\nimport Bundle from '../../ui/components/bundle';\n\nexport default class StatusCheckBox extends React.PureComponent {\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  };\n\n  render () {\n    const { status, checked, onToggle, disabled } = this.props;\n    let media = null;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.get('media_attachments').some(item => item.get('type') === 'unknown')) {\n\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Bundle fetchComponent={Video} loading={this.renderLoadingVideoPlayer} >\n            {Component => (\n              <Component\n                preview={video.get('preview_url')}\n                blurhash={video.get('blurhash')}\n                src={video.get('url')}\n                alt={video.get('description')}\n                width={239}\n                height={110}\n                inline\n                sensitive={status.get('sensitive')}\n                onOpenVideo={noop}\n              />\n            )}\n          </Bundle>\n        );\n      } else {\n        media = (\n          <Bundle fetchComponent={MediaGallery} loading={this.renderLoadingMediaGallery} >\n            {Component => <Component media={status.get('media_attachments')} sensitive={status.get('sensitive')} height={110} onOpenMedia={noop} />}\n          </Bundle>\n        );\n      }\n    }\n\n    return (\n      <div className='status-check-box'>\n        <div className='status-check-box__status'>\n          <StatusContent status={status} />\n          {media}\n        </div>\n\n        <div className='status-check-box-toggle'>\n          <Toggle checked={checked} onChange={onToggle} disabled={disabled} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport StatusCheckBox from '../components/status_check_box';\nimport { toggleStatusReport } from '../../../actions/reports';\nimport { Set as ImmutableSet } from 'immutable';\n\nconst mapStateToProps = (state, { id }) => ({\n  status: state.getIn(['statuses', id]),\n  checked: state.getIn(['reports', 'new', 'status_ids'], ImmutableSet()).includes(id),\n});\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n\n  onToggle (e) {\n    dispatch(toggleStatusReport(id, e.target.checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusCheckBox);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeReportComment, changeReportForward, submitReport } from '../../../actions/reports';\nimport { expandAccountTimeline } from '../../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { makeGetAccount } from '../../../selectors';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport StatusCheckBox from '../../report/containers/status_check_box_container';\nimport { OrderedSet } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Button from '../../../components/button';\nimport Toggle from 'react-toggle';\nimport IconButton from '../../../components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Additional comments' },\n  submit: { id: 'report.submit', defaultMessage: 'Submit' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = state => {\n    const accountId = state.getIn(['reports', 'new', 'account_id']);\n\n    return {\n      isSubmitting: state.getIn(['reports', 'new', 'isSubmitting']),\n      account: getAccount(state, accountId),\n      comment: state.getIn(['reports', 'new', 'comment']),\n      forward: state.getIn(['reports', 'new', 'forward']),\n      statusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])).union(state.getIn(['reports', 'new', 'status_ids'])),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    isSubmitting: PropTypes.bool,\n    account: ImmutablePropTypes.map,\n    statusIds: ImmutablePropTypes.orderedSet.isRequired,\n    comment: PropTypes.string.isRequired,\n    forward: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleCommentChange = e => {\n    this.props.dispatch(changeReportComment(e.target.value));\n  }\n\n  handleForwardChange = e => {\n    this.props.dispatch(changeReportForward(e.target.checked));\n  }\n\n  handleSubmit = () => {\n    this.props.dispatch(submitReport());\n  }\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      this.handleSubmit();\n    }\n  }\n\n  componentDidMount () {\n    this.props.dispatch(expandAccountTimeline(this.props.account.get('id'), { withReplies: true }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (this.props.account !== nextProps.account && nextProps.account) {\n      this.props.dispatch(expandAccountTimeline(nextProps.account.get('id'), { withReplies: true }));\n    }\n  }\n\n  render () {\n    const { account, comment, intl, statusIds, isSubmitting, forward, onClose } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const domain = account.get('acct').split('@')[1];\n\n    return (\n      <div className='modal-root__modal report-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-modal__container'>\n          <div className='report-modal__comment'>\n            <p><FormattedMessage id='report.hint' defaultMessage='The report will be sent to your server moderators. You can provide an explanation of why you are reporting this account below:' /></p>\n\n            <textarea\n              className='setting-text light'\n              placeholder={intl.formatMessage(messages.placeholder)}\n              value={comment}\n              onChange={this.handleCommentChange}\n              onKeyDown={this.handleKeyDown}\n              disabled={isSubmitting}\n              autoFocus\n            />\n\n            {domain && (\n              <div>\n                <p><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n                <div className='setting-toggle'>\n                  <Toggle id='report-forward' checked={forward} disabled={isSubmitting} onChange={this.handleForwardChange} />\n                  <label htmlFor='report-forward' className='setting-toggle__label'><FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} /></label>\n                </div>\n              </div>\n            )}\n\n            <Button disabled={isSubmitting} text={intl.formatMessage(messages.submit)} onClick={this.handleSubmit} />\n          </div>\n\n          <div className='report-modal__statuses'>\n            <div>\n              {statusIds.map(statusId => <StatusCheckBox id={statusId} key={statusId} disabled={isSubmitting} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}