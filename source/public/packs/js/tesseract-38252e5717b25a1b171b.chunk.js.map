{"version":3,"sources":["webpack:///./node_modules/tesseract.js/src/createScheduler.js","webpack:///./node_modules/tesseract.js/src/utils/resolvePaths.js","webpack:///./node_modules/tesseract.js/src/utils/getEnvironment.js","webpack:///./node_modules/is-electron/index.js","webpack:///./node_modules/tesseract.js/src/utils/circularize.js","webpack:///./node_modules/tesseract.js/src/constants/config.js","webpack:///./node_modules/tesseract.js/src/worker/browser/index.js","webpack:///./node_modules/tesseract.js/src/worker/browser/defaultOptions.js","webpack:///./node_modules/tesseract.js/src/constants/defaultOptions.js","webpack:///./node_modules/tesseract.js/src/worker/browser/spawnWorker.js","webpack:///./node_modules/tesseract.js/src/worker/browser/terminateWorker.js","webpack:///./node_modules/tesseract.js/src/worker/browser/onMessage.js","webpack:///./node_modules/tesseract.js/src/worker/browser/send.js","webpack:///./node_modules/tesseract.js/src/worker/browser/loadImage.js","webpack:///./node_modules/tesseract.js/src/Tesseract.js","webpack:///./node_modules/tesseract.js/src/constants/PSM.js","webpack:///./node_modules/tesseract.js/src/index.js","webpack:///./node_modules/tesseract.js/src/utils/getId.js","webpack:///./node_modules/tesseract.js/src/utils/log.js","webpack:///./node_modules/resolve-url/resolve-url.js","webpack:///./node_modules/tesseract.js/src/createJob.js","webpack:///./node_modules/tesseract.js/src/createWorker.js","webpack:///./node_modules/tesseract.js/src/constants/OEM.js"],"names":["createJob","log","getId","schedulerCounter","module","exports","id","workers","runningWorkers","jobQueue","getNumWorkers","Object","keys","length","dequeue","wIds","i","queue","action","payload","Promise","resolve","reject","job","push","async","w","shift","apply","this","err","addWorker","addJob","Error","terminate","forEach","wid","getQueueLen","resolveURL","s","options","opts","key","env","isElectron","type","window","importScripts","process","versions","electron","navigator","userAgent","indexOf","page","blocks","paragraphs","lines","words","symbols","block","paragraph","line","word","sym","OEM","defaultOEM","DEFAULT","defaultOptions","spawnWorker","terminateWorker","onMessage","send","loadImage","version","dependencies","workerPath","TESS_ENV","Math","random","toString","slice","corePath","substring","WebAssembly","langPath","workerBlobURL","logger","worker","Blob","URL","blob","Worker","createObjectURL","handler","onmessage","data","packet","postMessage","readFromBlobOrFile","fileReader","FileReader","onload","result","onerror","target","error","code","readAsArrayBuffer","image","test","atob","split","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","File","Uint8Array","createWorker","recognize","langs","load","loadLanguage","initialize","finally","detect","OSD_ONLY","AUTO_OSD","AUTO_ONLY","AUTO","SINGLE_COLUMN","SINGLE_BLOCK_VERT_TEXT","SINGLE_BLOCK","SINGLE_LINE","SINGLE_WORD","CIRCLE_WORD","SINGLE_CHAR","SPARSE_TEXT","SPARSE_TEXT_OSD","createScheduler","Tesseract","PSM","setLogging","prefix","cnt","logging","_logging","args","console","resolveUrl","numUrls","arguments","base","document","createElement","href","head","getElementsByTagName","insertBefore","firstChild","resolved","a","index","removeChild","jobCounter","_id","resolvePaths","circularize","workerCounter","_options","errorHandler","resolves","rejects","setResolve","res","setReject","rej","startJob","jobId","workerId","status","d","Array","from","writeText","path","text","method","readText","encoding","removeFile","FS","oem","setParameters","params","getPDF","title","textonly","TESSERACT_ONLY","LSTM_ONLY","TESSERACT_LSTM_COMBINED"],"mappings":"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","file":"js/tesseract-38252e5717b25a1b171b.chunk.js","sourcesContent":["const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\nconst resolveURL = isBrowser ? require('resolve-url') : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (typeof options[key] !== 'undefined') {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof window === 'object') {\n    env.type = 'browser';\n  } else if (typeof importScripts === 'function') {\n    env.type = 'webworker';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n  // Renderer process\n  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n    return true;\n  } // Main process\n\n\n  if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n    return true;\n  } // Detect the user agent when the `nodeIntegration` option is set to true\n\n\n  if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = isElectron;","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  page.blocks.forEach((block) => {\n    block.paragraphs.forEach((paragraph) => {\n      paragraph.lines.forEach((line) => {\n        line.words.forEach((word) => {\n          word.symbols.forEach((sym) => {\n            symbols.push({\n              ...sym, page, block, paragraph, line, word,\n            });\n          });\n          words.push({\n            ...word, page, block, paragraph, line,\n          });\n        });\n        lines.push({\n          ...line, page, block, paragraph,\n        });\n      });\n      paragraphs.push({\n        ...paragraph, page, block,\n      });\n    });\n    blocks.push({\n      ...block, page,\n    });\n  });\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","const OEM = require('./OEM');\n\nmodule.exports = {\n  defaultOEM: OEM.DEFAULT,\n};\n","/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","const resolveURL = require('resolve-url');\nconst { version, dependencies } = require('../../../package.json');\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: (typeof process !== 'undefined' && process.env.TESS_ENV === 'development')\n    ? resolveURL(`/dist/worker.dev.js?nocache=${Math.random().toString(36).slice(3)}`)\n    : `https://unpkg.com/tesseract.js@v${version}/dist/worker.min.js`,\n  /*\n   * If browser doesn't support WebAssembly,\n   * load ASM version instead\n   */\n  corePath: `https://unpkg.com/tesseract.js-core@v${dependencies['tesseract.js-core'].substring(1)}/tesseract-core.${typeof WebAssembly === 'object' ? 'wasm' : 'asm'}.js`,\n};\n","module.exports = {\n  /*\n   * default path for downloading *.traineddata\n   */\n  langPath: 'https://tessdata.projectnaptha.com/4.0.0',\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","const resolveURL = require('resolve-url');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = blob => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map(c => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage(langs);\n  await worker.initialize(langs);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage('osd');\n  await worker.initialize('osd');\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n};\n","/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","// Copyright 2014 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\nvoid function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory();\n  } else {\n    root.resolveUrl = factory();\n  }\n}(this, function () {\n  function resolveUrl() {\n    var numUrls = arguments.length;\n\n    if (numUrls === 0) {\n      throw new Error(\"resolveUrl requires at least one argument; got none.\");\n    }\n\n    var base = document.createElement(\"base\");\n    base.href = arguments[0];\n\n    if (numUrls === 1) {\n      return base.href;\n    }\n\n    var head = document.getElementsByTagName(\"head\")[0];\n    head.insertBefore(base, head.firstChild);\n    var a = document.createElement(\"a\");\n    var resolved;\n\n    for (var index = 1; index < numUrls; index++) {\n      a.href = arguments[index];\n      resolved = a.href;\n      base.href = resolved;\n    }\n\n    head.removeChild(base);\n    return resolved;\n  }\n\n  return resolveUrl;\n});","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = jobId => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }))\n  );\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n};\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n"],"sourceRoot":""}