{"version":3,"sources":["webpack:///./app/javascript/mastodon/containers/media_container.js"],"names":["getLocale","localeData","messages","addLocaleData","MEDIA_COMPONENTS","MediaGallery","Video","Card","Poll","Hashtag","Audio","MediaContainer","state","media","index","time","backgroundColor","options","handleOpenMedia","document","body","classList","add","documentElement","style","marginRight","getScrollbarWidth","setState","handleOpenVideo","components","props","JSON","parse","componetIndex","getAttribute","mediaList","fromJS","handleCloseMedia","remove","setBackgroundColor","color","render","this","locale","map","call","component","i","componentName","Component","card","poll","hashtag","Object","assign","onOpenVideo","onOpenMedia","ReactDOM","createPortal","key","onClose","currentTime","startTime","autoPlay","volume","defaultVolume","onChangeBackgroundColor","PureComponent"],"mappings":"qVAgBA,EAAiCA,sBAAzBC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACpBC,YAAcF,GAEd,IAAMG,EAAmB,CAAEC,uBAAcC,gBAAOC,SAAMC,SAAMC,YAASC,iBAEhDC,E,oJAOnBC,MAAQ,CACNC,MAAO,KACPC,MAAO,KACPC,KAAM,KACNC,gBAAiB,KACjBC,QAAS,M,EAGXC,gBAAkB,SAACL,EAAOC,GACxBK,SAASC,KAAKC,UAAUC,IAAI,uBAC5BH,SAASI,gBAAgBC,MAAMC,YAAiBC,cAAhD,KAEA,EAAKC,SAAS,CAAEd,QAAOC,W,EAGzBc,gBAAkB,SAACX,GACjB,IAAQY,EAAe,EAAKC,MAApBD,WACAhB,EAAUkB,KAAKC,MAAMH,EAAWZ,EAAQgB,eAAeC,aAAa,eAApErB,MACFsB,EAAYC,iBAAOvB,GAEzBM,SAASC,KAAKC,UAAUC,IAAI,uBAC5BH,SAASI,gBAAgBC,MAAMC,YAAiBC,cAAhD,KAEA,EAAKC,SAAS,CAAEd,MAAOsB,EAAWlB,a,EAGpCoB,iBAAmB,WACjBlB,SAASC,KAAKC,UAAUiB,OAAO,uBAC/BnB,SAASI,gBAAgBC,MAAMC,YAAc,EAE7C,EAAKE,SAAS,CACZd,MAAO,KACPC,MAAO,KACPC,KAAM,KACNC,gBAAiB,KACjBC,QAAS,Q,EAIbsB,mBAAqB,SAAAC,GACnB,EAAKb,SAAS,CAAEX,gBAAiBwB,K,sCAGnCC,OAAA,WAAW,IAAD,aACR,EAA+BC,KAAKZ,MAA5Ba,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,WAEhB,OACE,YAAC,IAAD,CAAcc,OAAQA,EAAQzC,SAAUA,QAAxC,EACE,YAAC,WAAD,UACG,GAAG0C,IAAIC,KAAKhB,GAAY,SAACiB,EAAWC,GACnC,IAAMC,EAAgBF,EAAUZ,aAAa,kBACvCe,EAAY7C,EAAiB4C,GACnC,EAAiDjB,KAAKC,MAAMc,EAAUZ,aAAa,eAA3ErB,EAAR,EAAQA,MAAOqC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,QAAYtB,EAAvC,iBAgBA,OAdAuB,OAAOC,OAAOxB,EAAduB,OAAA,IAAAA,CAAA,GACMxC,EAAU,CAAEA,MAASuB,iBAAOvB,IAAa,GACzCqC,EAAU,CAAEA,KAASd,iBAAOc,IAAa,GACzCC,EAAU,CAAEA,KAASf,iBAAOe,IAAa,GACzCC,EAAU,CAAEA,QAAShB,iBAAOgB,IAAa,GAEvB,UAAlBJ,EAA4B,CAC9Bf,cAAec,EACfQ,YAAa,EAAK3B,iBAChB,CACF4B,YAAa,EAAKtC,mBAIfuC,IAASC,aACd,kBAACT,EAAD,eAAenB,EAAf,CAAsB6B,IAAG,SAAWZ,KACpCD,MAIJ,YAAC,IAAD,CAAW9B,gBAAiB0B,KAAK9B,MAAMI,gBAAiB4C,QAASlB,KAAKL,uBAAtE,EACGK,KAAK9B,MAAMC,OACV,YAAC,IAAD,CACEA,MAAO6B,KAAK9B,MAAMC,MAClBC,MAAO4B,KAAK9B,MAAME,OAAS,EAC3B+C,YAAW,SAAEnB,KAAK9B,MAAMK,cAAb,EAAE,EAAoB6C,UACjCC,SAAQ,SAAErB,KAAK9B,MAAMK,cAAb,EAAE,EAAoB8C,SAC9BC,OAAM,SAAEtB,KAAK9B,MAAMK,cAAb,EAAE,EAAoBgD,cAC5BL,QAASlB,KAAKL,iBACd6B,wBAAyBxB,KAAKH,yB,GA1FF4B","file":"js/containers/media_container-e11d2180755716186092.chunk.js","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport { fromJS } from 'immutable';\nimport { getLocale } from 'mastodon/locales';\nimport { getScrollbarWidth } from 'mastodon/utils/scrollbar';\nimport MediaGallery from 'mastodon/components/media_gallery';\nimport Poll from 'mastodon/components/poll';\nimport Hashtag from 'mastodon/components/hashtag';\nimport ModalRoot from 'mastodon/components/modal_root';\nimport MediaModal from 'mastodon/features/ui/components/media_modal';\nimport Video from 'mastodon/features/video';\nimport Card from 'mastodon/features/status/components/card';\nimport Audio from 'mastodon/features/audio';\n\nconst { localeData, messages } = getLocale();\naddLocaleData(localeData);\n\nconst MEDIA_COMPONENTS = { MediaGallery, Video, Card, Poll, Hashtag, Audio };\n\nexport default class MediaContainer extends PureComponent {\n\n  static propTypes = {\n    locale: PropTypes.string.isRequired,\n    components: PropTypes.object.isRequired,\n  };\n\n  state = {\n    media: null,\n    index: null,\n    time: null,\n    backgroundColor: null,\n    options: null,\n  };\n\n  handleOpenMedia = (media, index) => {\n    document.body.classList.add('with-modals--active');\n    document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n\n    this.setState({ media, index });\n  }\n\n  handleOpenVideo = (options) => {\n    const { components } = this.props;\n    const { media } = JSON.parse(components[options.componetIndex].getAttribute('data-props'));\n    const mediaList = fromJS(media);\n\n    document.body.classList.add('with-modals--active');\n    document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n\n    this.setState({ media: mediaList, options });\n  }\n\n  handleCloseMedia = () => {\n    document.body.classList.remove('with-modals--active');\n    document.documentElement.style.marginRight = 0;\n\n    this.setState({\n      media: null,\n      index: null,\n      time: null,\n      backgroundColor: null,\n      options: null,\n    });\n  }\n\n  setBackgroundColor = color => {\n    this.setState({ backgroundColor: color });\n  }\n\n  render () {\n    const { locale, components } = this.props;\n\n    return (\n      <IntlProvider locale={locale} messages={messages}>\n        <Fragment>\n          {[].map.call(components, (component, i) => {\n            const componentName = component.getAttribute('data-component');\n            const Component = MEDIA_COMPONENTS[componentName];\n            const { media, card, poll, hashtag, ...props } = JSON.parse(component.getAttribute('data-props'));\n\n            Object.assign(props, {\n              ...(media   ? { media:   fromJS(media)   } : {}),\n              ...(card    ? { card:    fromJS(card)    } : {}),\n              ...(poll    ? { poll:    fromJS(poll)    } : {}),\n              ...(hashtag ? { hashtag: fromJS(hashtag) } : {}),\n\n              ...(componentName === 'Video' ? {\n                componetIndex: i,\n                onOpenVideo: this.handleOpenVideo,\n              } : {\n                onOpenMedia: this.handleOpenMedia,\n              }),\n            });\n\n            return ReactDOM.createPortal(\n              <Component {...props} key={`media-${i}`} />,\n              component,\n            );\n          })}\n\n          <ModalRoot backgroundColor={this.state.backgroundColor} onClose={this.handleCloseMedia}>\n            {this.state.media && (\n              <MediaModal\n                media={this.state.media}\n                index={this.state.index || 0}\n                currentTime={this.state.options?.startTime}\n                autoPlay={this.state.options?.autoPlay}\n                volume={this.state.options?.defaultVolume}\n                onClose={this.handleCloseMedia}\n                onChangeBackgroundColor={this.setBackgroundColor}\n              />\n            )}\n          </ModalRoot>\n        </Fragment>\n      </IntlProvider>\n    );\n  }\n\n}\n"],"sourceRoot":""}